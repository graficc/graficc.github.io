[{"categories":[""],"content":"个人概况 大连理工大学19级软件工程学院本科生，大三在读。 目前主要的研究方向是计算机图形学（Computer Graphics）。 最喜爱的程序员是John Carmack和Linus Torvalds Which hurts more , the pain of hard work or the pain of regret ? ","date":"2022-04-22","objectID":"/about/:1:0","tags":[""],"title":"About","uri":"/about/"},{"categories":[""],"content":"个人项目 个人博客网站：https://horel.github.io/ GAMES101作业：https://github.com/horel/GAMES101/ ","date":"2022-04-22","objectID":"/about/:2:0","tags":[""],"title":"About","uri":"/about/"},{"categories":[""],"content":"友链 Horel 的 UnOfficial 博客：https://horel.github.io/ ","date":"2022-04-22","objectID":"/about/:3:0","tags":[""],"title":"About","uri":"/about/"},{"categories":[["二进制玄学"]],"content":"CMake Example 因为众所周知的原因 CMake限制了C++的发展 不得不简单学习了一下CMake的使用，列在这里 ","date":"2021-11-21","objectID":"/posts/cmake-example/:0:0","tags":["C++"],"title":"CMake Example","uri":"/posts/cmake-example/"},{"categories":[["二进制玄学"]],"content":"CMake文件 #===================================================# # CMakeLists.txt -- rootFolder #===================================================# # 变量解释 # PROJECT_SOURCE_DIR --- project root path # PROJECT_BINARY_DIR --- cmake 编译所在的目录 path # CMAKE_SOURCE_DIR --- current CMakeLists.txt path # CMAKE_CURRENT_SOURCE_DIR --- current sub CMakeLists.txt path # CMAKE_BINARY_DIR --- run cmake .. path #---------------------------------------------------# # cmake version #---------------------------------------------------# cmake_minimum_required(VERSION 3.1)message( STATUS \"CMake Version: ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION}\" )#---------------------------------------------------# # OS #---------------------------------------------------# if( APPLE ) option( TPR_OS_MACOSX_ \" MACOSX \" ON ) option( TPR_OS_UNIX_ \" UNIX \" ON ) message( STATUS \"___APPLE___\" )elseif( UNIX AND NOT APPLE ) option( TPR_OS_LINUX_ \" LINUX \" ON ) option( TPR_OS_UNIX_ \" UNIX \" ON ) message( STATUS \"___UNIX___\" )#-- 当使用 Virsual Studio 编译 cmake项目时，可用 WIN32 # 如果出错，尝试改用 MSVC elseif( WIN32 ) option( TPR_OS_WIN32_ \" WIN32 \" ON ) message( STATUS \"___WIN32___\" )endif( APPLE )#---- Must before project!!! ---- #---------------------------------------------------# # c++ standard #---------------------------------------------------# set (CMAKE_CXX_STANDARD 17)set (CMAKE_CXX_STANDARD_REQUIRED ON)set (CMAKE_CXX_EXTENSIONS OFF)#---------------------------------------------------# # project name #---------------------------------------------------# project ( Project_Name )#---------------------------------------------------# # project version #---------------------------------------------------# #-- *** test: 0.1 *** set ( VERSION_MAJOR 0 )set ( VERSION_MINOR 1 )#---------------------------------------------------# # build/publish/ #---------------------------------------------------# #-- change finally exe out-path: build/publish set (EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/publish)set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/publish)# 确认一些 变量值： message(STATUS \"[__INFO__] CMAKE_BINARY_DIR: ${CMAKE_BINARY_DIR}\")message(STATUS \"[__INFO__] PROJECT_BINARY_DIR: ${PROJECT_BINARY_DIR}\")message(STATUS \"[__INFO__] CMAKE_RUNTIME_OUTPUT_DIRECTORY: ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}\")#---------------------------------------------------# # SySconfig # 宏定义系统OS类型，CMake版本等 #---------------------------------------------------# #-- 配置 一个 h文件，用来 从 cmake 传递一些 变量 到 源文件 中。 #-- 我们需要手动编写 .h.in 文件。 #-- 然后，cmake调用会 帮我们自动生成对应的 h文件。 #-- 最后，正式 make编译时。源文件 就能 include 这些生成的 h文件。 option( SWITCH_1 \" option test: switch 1 \" ON )configure_file( \"${CMAKE_CURRENT_SOURCE_DIR}/sysconfig/SysConfig.h.in\" \"${EXECUTABLE_OUTPUT_PATH}/sysconfig/SysConfig.h\" )#---------------------------------------------------# # src (.cpp/.c) #---------------------------------------------------# #-- 创建变量 PIXEL_FILES （是个 list） #-- 包含 主进程需要的所有 .c/.cpp 文件 # GLOB_RECURSE 会递归访问目录，这是一种粗粒度的写法 # 如果想要精细控制，应该改用 GLOB # 请把所有 .c/.cpp 文件写入 src 目录，及其递归子目录下， # 然后就什么都不用管了 FILE(GLOB_RECURSE PIXEL_FILES ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp ${CMAKE_CURRENT_SOURCE_DIR}/src/*.c )#---------------------------------------------------# # App_Name #---------------------------------------------------# if( ${CMAKE_VERSION} VERSION_GREATER_EQUAL 3.16 ) set ( CMAKE_UNITY_BUILD_BATCH_SIZE 16 ) # 10 ～ 20 endif()add_executable( App_Name ${PIXEL_FILES} )#-- set libs/dlls output-name --\u003e \"App_Name.xxx\" set_target_properties(App_Name PROPERTIES PREFIX \"\")set_target_properties(App_Name PROPERTIES OUTPUT_NAME \"App_Name\")if( ${CMAKE_VERSION} VERSION_GREATER_EQUAL 3.16 ) target_precompile_headers( App_Name PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/src/_pch_/pch.h ) # PCH set_target_properties( App_Name PROPERTIES UNITY_BUILD ON) # UNITY endif()#---------------------------------------------------# # include （.h/.hpp） #-------","date":"2021-11-21","objectID":"/posts/cmake-example/:1:0","tags":["C++"],"title":"CMake Example","uri":"/posts/cmake-example/"},{"categories":[["二进制玄学"]],"content":"Build脚本 ","date":"2021-11-21","objectID":"/posts/cmake-example/:2:0","tags":["C++"],"title":"CMake Example","uri":"/posts/cmake-example/"},{"categories":[["二进制玄学"]],"content":"Unix构建脚本 #!/bin/bash #------------- prepare dirs --------------- # 将 根目录下的一些 资料目录（比如 \"shaders\",\"jsons\" ） # 复制进 \u003croot\u003e/build/publish/ 目录下 DIR_base=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" \u0026\u0026 pwd )\" DIR_out=${DIR_base}/build/publish/ DIR_src_shaders=${DIR_base}/shaders/ DIR_src_jsons=${DIR_base}/jsons/ DIR_dst_shaders=${DIR_out}/shaders/ DIR_dst_jsons=${DIR_out}/jsons/ echo -e \"------------\" echo -e \"DIR_base: ${DIR_base}\" echo -e \"DIR_out: ${DIR_out}\" echo -e \"------------\" if [ ! -d \"${DIR_out}\" ]; then mkdir -p ${DIR_out} fi if [ ! -d \"${DIR_dst_shaders}\" ]; then mkdir -p ${DIR_dst_shaders} fi if [ ! -d \"${DIR_dst_jsons}\" ]; then mkdir -p ${DIR_dst_jsons} fi # Access Permission chmod -R ug=rwx ${DIR_out} #-----------------------# # cp -R \"dir1\"/. \"dir2\" # copy files in \"dir1\", not copy \"dir1\" self #: cp -R ${DIR_src_shaders}. ${DIR_dst_shaders} cp -R ${DIR_src_jsons}. ${DIR_dst_jsons} #------------- build cpp/c# ---------------- cd build cmake -DCMAKE_BUILD_TYPE=Release .. # 多线程加速编译，可自行改写线程数，比如：-j8 make -j4 cd .. ","date":"2021-11-21","objectID":"/posts/cmake-example/:2:1","tags":["C++"],"title":"CMake Example","uri":"/posts/cmake-example/"},{"categories":[["二进制玄学"]],"content":"Win构建脚本 @echo off REM ------------- build cpp ---------------- REM before run this shell REM go to Visual Studio first, REM set Build root: ${projectDir}\\build REM compiler cpp-exe by cmake-clang REM ----------------- prepare dirs --------------- SET DIR_base=%~dp0 SET DIR_out=%~dp0\\build\\publish SET DIR_src_shaders=%~dp0\\shaders SET DIR_src_jsons=%~dp0\\jsons SET DIR_dst_shaders=%~dp0\\build\\publish\\shaders SET DIR_dst_jsons=%~dp0\\build\\publish\\jsons mkdir %DIR_out% mkdir %DIR_dst_shaders% mkdir %DIR_dst_jsons% xcopy /E /V /F /K /Y %DIR_src_shaders% %DIR_dst_shaders% xcopy /E /V /F /K /Y %DIR_src_jsons% %DIR_dst_jsons% ","date":"2021-11-21","objectID":"/posts/cmake-example/:2:2","tags":["C++"],"title":"CMake Example","uri":"/posts/cmake-example/"},{"categories":[["二进制玄学"]],"content":"使用clang构建 #!/bin/bash # Ubuntu supports multiple versions of clang to be installed at the same time. # The tests need to determine the clang binary before calling cmake clang_bin=`which clang` clang_xx_bin=`which clang++` if [ -z $clang_bin ]; then clang_ver=`dpkg --get-selections | grep clang | grep -v -m1 libclang | cut -f1 | cut -d '-' -f2` clang_bin=\"clang-$clang_ver\" clang_xx_bin=\"clang++-$clang_ver\" fi echo \"Will use clang [$clang_bin] and clang++ [$clang_xx_bin]\" mkdir -p build.clang \u0026\u0026 cd build.clang \u0026\u0026 \\ cmake .. -DCMAKE_C_COMPILER=$clang_bin -DCMAKE_CXX_COMPILER=$clang_xx_bin \u0026\u0026 make -j -l 13 ","date":"2021-11-21","objectID":"/posts/cmake-example/:2:3","tags":["C++"],"title":"CMake Example","uri":"/posts/cmake-example/"},{"categories":[["二进制玄学"]],"content":"sysconfig跨平台宏 // sysconfig/Sysconfig.h.in // 注释行 格式 #ifndef TPR_SYS_CONFIG_TPR_H_ #define TPR_SYS_CONFIG_TPR_H_ //-- 获得 项目版本号，设置为 宏，以便 源码 中使用。 #define VERSION_MAJOR @VERSION_MAJOR@ #define VERSION_MINOR @VERSION_MINOR@ //-- SWITCH_1 是个 option，需要 cmake 动态生成 // 示范如何创建一个 cmake 自定义变量 // 最终可以传递到 编译后的 程序体内 #cmakedefine SWITCH_1 //-- 标明自己所处 OS #cmakedefine TPR_OS_UNIX_ #cmakedefine TPR_OS_MACOSX_ #cmakedefine TPR_OS_LINUX_ #cmakedefine TPR_OS_WIN32_ //-- CMAKE_SYSTEM_NAME 表示 当前系统名，比如 Linux，Darwin //-- 使用 @...@ 提取后，再用 \"...\" 将其设置为 字符串宏 //-- 以便 源码 中使用。 #define SYSTEM_NAME \"@CMAKE_SYSTEM_NAME@\" #endif ","date":"2021-11-21","objectID":"/posts/cmake-example/:3:0","tags":["C++"],"title":"CMake Example","uri":"/posts/cmake-example/"},{"categories":[["二进制玄学"]],"content":"对透视投影的深入思考 投影变换是整个渲染管线里，设计得最复杂的，也最巧妙的一次变换。 前因 在GAMES101中，我只是大概了解了透视投影矩阵所做出的变换，将视椎体中的点全部映射到近平面上，再将近平面缩放成规则观察体(CVV空间)。 而在tinyrenderer中，我见到了不一样的透视投影矩阵。 关于透视投影的插值矫正，tinyrenderer直接忽略了这点，GAMES101中也没有做更详细的讲解，以至于我在看到透视除法等一系列操作时摸不到头脑。 于是，我去开始查找资料，为什么要做透视投影的插值矫正？但网上得到的答案大多都很简短、类似。类似于：重心坐标插值要在线性空间中插值，世界空间、观察空间中的坐标都是线性的，而经过透视投影变换后，是非线性的。于是以屏幕坐标插值出的结果是畸形的，当线性坐标下(例如观察坐标)的插值结果才是正确的。 这番解释虽然大概说明了要做透视插值矫正的必要性，但距离实际应用还是一头雾水。我到底该怎么从屏幕坐标这个非线性空间，插值得到线性空间坐标？透视投影变换的步骤究竟是什么？透视除法除以的w分量又究竟是什么，为什么要这么做？ 于是，我展开了深入的理解。 理解前的统一定义 首先，为了统一坐标系、矩阵等问题，我会从以下方式思考： 向量默认为列向量 矩阵默认为列主序 变换默认为矩阵左乘 坐标系默认为右手系 摄像机默认处于原点，lookat方向-z，向上方向+y 投影变换的目的 坐标转换到观察空间后，由于直接使用摄像机的平截头体进行裁剪比较复杂（平截头体的边界方程求交困难），所以需要将其转化到裁剪空间（Clip空间 ）。 从观察空间到裁剪空间的变换叫做投影变换。Project 裁剪空间变换的思路是，对视椎体进行缩放，使远裁剪面缩放至近裁剪面大小，然后将这个长方体缩放至标准立方体移动到原点，使坐标的w分量表示裁剪范围，此时，只需要简单的比较x,y,z和w分量的大小即可裁剪图元。 虽然叫做投影变换，但是投影变换并没有进行真正的投影。 这一篇主要讲透视投影 透视投影变换步骤 从视椎体内一点投影到近裁剪面 由近裁剪面缩放至规则观察体(CVV空间)，得到clip坐标(此时clip坐标还没有除以w变成3D坐标，仍是齐次坐标) 对相机空间中的顶点，如果在视锥体中，则变换后就在CVV中。如果在视锥体外，变换后就在CVV外。CVV本身的规则性对于多边形的裁剪很有利。 透视投影简易模型理解 首先，我们明确我们的需求：将观察空间中视椎体中的坐标点 (x, y, z, 1)，通过透视投影，转化到近平面上的点 (x’, y’, z’, 1) 中去。 那么我们可以很简单的得到 z’ = Near，那么由于近平面值Near是固定的，先不妨假设为1，则 由相似三角形可得： z’ = 1 （z’ = Near） x’ = x/z （x’ = x * Near / z） y’ = y/z （y’ = y * Near / z） w = 1 那么就可以推出tinyrenderer中的透视矩阵： 因采用右手系，这里红色的1应该是-1 注意到M的最后一行不是(0 0 0 1)而是(0 0 -1 0)，因此可以看出透视变换不是一种仿射变换，它是非线性的。 经过这个矩阵变换，就可以得到(x’ = x, y’ = y, z’ = z, w’ = z)，经过齐次除法，xy映射到x’ = x/z，y’ = y/z，z’ = 1。这正是我们想要的变换。 我们将透视投影变换的系数储存在了w分量里，只要进行透视除法，就是非线性的(x’, y’, z’)坐标，而不考虑w分量，(x, y, z)仍是线性可插值的。 数学推导 推荐看这篇文章：图形学基础之透视校正插值 经过推导，我们发现： 当我们从视角空间到透视投影到屏幕空间后，我们的线性变换并不是x, y, z的线性变换，而是x, y, 1/z的线性变换。因此在屏幕空间上的插值需要做透视校正，否则会出现不正确的情况。 为什么是1/z的线性变换呢，在透视投影中，我们的视椎体是一个不规则立方体，将点(x, y, z)中的x, y映射到屏幕(近平面)上时会根据其z的值进行压缩，其公式是： x’ = Near/z * x y’ = Near/z * y 可以发现x’, y’和x, y的关系是1/z的关系。 在齐次坐标中 ，因此我们将z保存在w的位置，将x, y, z在透视投影下的线性变换都乘以z。这样 就是关于x, y, z的线性变换。 因此所谓的透视除法，就是在透视投影后还原x, y, z真实的屏幕空间值的过程。 真实模型理解 下面来看看网上最常见的透视矩阵书写形式： 其实这么写反而妨碍了我们的直观理解，由Aspect、Fov与w（width）、h（height）、N（Near）、F（Far）的关系，我们应当写成如下形式： 发现了吗，和透视矩阵之母Pure Perspective Projection的区别，第一列第一行的1变为了N*（2/w）这么一个缩放值。 2/w很好理解，是将近平面的宽缩放到长度2； 乘上N ，是因为考虑到齐次除法xyz分量要除以w分量，矩阵转化后的w分量等于转化前的z分量相反数。 故x’/w’= x/z, y’/w’ = y/z,是我们要的投影到近平面为1的值，这个值乘上N就相当于映射到了近平面，即true x’ =（N/z）*（2/w）。 相应的，mat11的值1变化为2N/h。 总结 关于透视投影的矫正，通过将原始的z值存储在w分量中。 透视校正插值使用线性的深度值和非线性空间下的插值系数s来计算出线性空间下的插值系数t，并用t来对顶点属性进行插值。 最后得到的(x’, y’, z’, w)中，x‘、y’已经是xy乘过Near了，再除以z不就是屏幕空间吗。 x’ = x * Near / z y’ = y * Near / z z = Near w = 1 ","date":"2021-10-31","objectID":"/posts/%E9%80%8F%E8%A7%86%E6%8A%95%E5%BD%B1/:0:0","tags":["计算机图形学"],"title":"透视投影","uri":"/posts/%E9%80%8F%E8%A7%86%E6%8A%95%E5%BD%B1/"},{"categories":[["二进制玄学"]],"content":"牛顿迭代法求平方根 牛顿迭代法求平方根，这种方法可以很有效地求出根号a的近似值： 首先随便猜一个近似值x，然后不断令x等于x和a/x的平均数，迭代个六七次后x的值就已经相当精确了。 例如，我想求根号2等于多少。假如我猜测的结果为4，虽然错的离谱，但你可以看到使用牛顿迭代法后这个值很快就趋近于根号2了： ;;;info ( 4 + 2/ 4 ) / 2 = 2.25 ( 2.25 + 2/ 2.25 ) / 2 = 1.56944.. ( 1.56944..+ 2/1.56944..) / 2 = 1.42189.. ( 1.42189..+ 2/1.42189..) / 2 = 1.41423.. …. ;;; 原理其实很简单，我们仅仅是不断用(x,f(x))的切线来逼近方程x^2-a=0的根。 根号a实际上就是x^2-a=0的一个正实根，这个函数的导数是2x。 也就是说，函数上任一点(x,f(x))处的切线斜率是2x。那么，x-f(x)/(2x)就是一个比x更接近的近似值。 代入f(x)=x^2-a得到x-(x^2-a)/(2x)，也就是(x+a/x)/2。 java代码实现如下 public static double sqrt(double c) { if(c \u003c 0) { return Double.NaN; } double err = 1e-15; double x = c; // 循环条件为上一次值和这次值的差，小于一个阈值(误差范围)退出 while(Math.abs(x - c/x) \u003e err * x) { x = (c/x + x) / 2.0; } return x; } 参考自：http://www.matrix67.com/blog/archives/361 ","date":"2021-06-30","objectID":"/posts/%E7%89%9B%E9%A1%BF%E8%BF%AD%E4%BB%A3%E6%B3%95%E6%B1%82%E5%B9%B3%E6%96%B9%E6%A0%B9/:0:0","tags":["算法"],"title":"牛顿迭代法求平方根","uri":"/posts/%E7%89%9B%E9%A1%BF%E8%BF%AD%E4%BB%A3%E6%B3%95%E6%B1%82%E5%B9%B3%E6%96%B9%E6%A0%B9/"},{"categories":[["二进制玄学"]],"content":" 首次适应算法FF 循环首次适应算法NF 最佳适应算法BF 最差适应算法WF #include \u003cmalloc.h\u003e#include \u003cstdio.h\u003e#include \u003cstdlib.h\u003e #define PROCESS_NAME_LEN 32 //进程名字长度 #define MIN_SLICE 10 //最小碎片大小 #define DEFAULT_MEM_SIZE 1024 // 默认的内存大小 #define DEFAULT_MEM_START 0 //起始地址 #define MA_FF 1 //首次适应算法 #define MA_BF 2 //最佳适应算法 #define MA_WF 3 //最坏适应算法 #define MA_NF 4 //临近适应算法（循环首次适应算法） //空闲分区的结构体 typedef struct free_block_type { int size; int start_addr; struct free_block_type *next; } free_block_type; /*指向内存中空闲块链表的首指针*/ free_block_type *free_block; //已分配分区的结构体 typedef struct allocated_block { int pid; int size; int start_addr; char process_name[PROCESS_NAME_LEN]; struct allocated_block *next; } allocated_block; //进程分配内存块链表的首指针 struct allocated_block *allocated_block_head = NULL; int mem_size = DEFAULT_MEM_SIZE; // 内存大小 int ma_algorithm = MA_FF; // 动态分区分配算法 static int pid = 0; // 进程号 int flag = 0; // 判断内存是否被修改标志 //函数声明 void display_menu(); // 显示主菜单 int set_mem_size(); // 设置内存大小 void set_algorithm(); // 选择当前算法 void rearrange(int algorithm); // 为每一个进程分配完内存以后重新按已选择的算法再次排序 int new_process(); // 创建一个新的进程 int allocate_mem(struct allocated_block *ab); // 内存分配 void kill_process(); // 杀死进程 int free_mem(struct allocated_block *ab); // 释放杀死进程的内存块 int dispose(struct allocated_block *free_ab); // 销毁杀死进程的结点 int display_mem_usage(); // 显示内存使用情况 allocated_block *find_process(int pid); // 找到要杀死的进程的标号 void rearrange_FF(); // 首次适应算法 void rearrange_BF(); // 最佳适应算法 void rearrange_WF(); // 最坏适应算法 void rearrange_NF(); // 临近适应算法（循环首次适应算法） //初始化空闲分区 free_block_type *init_free_block(int mem_size) { free_block_type *fb; fb = (free_block_type *)malloc(sizeof(free_block_type)); if (fb == NULL) { printf(\"No mem\\n\"); return NULL; } fb-\u003esize = mem_size; fb-\u003estart_addr = DEFAULT_MEM_START; fb-\u003enext = NULL; return fb; } //显示主菜单 void display_menu() { printf(\"\\n\"); printf(\"1 - Set memory size (default=%d)\\n\", DEFAULT_MEM_SIZE); printf(\"2 - Select memory allocation algorithm\\n\"); printf(\"3 - New process \\n\"); printf(\"4 - Terminate a process \\n\"); printf(\"5 - Display memory usage \\n\"); printf(\"0 - Exit\\n\"); } /*设置内存大小*/ int set_mem_size() { int size; if (flag != 0) { /*flag标志防止内存被再次设置*/ printf(\"Cannot set memory size again\\n\"); return 0; } printf(\"Total memory size =\"); scanf(\"%d\", \u0026size); if (size \u003e 0) { mem_size = size; free_block-\u003esize = mem_size; /*设置初始大小为 1024*/ } flag = 1; return 1; } /*选择当前算法*/ void set_algorithm() { int algorithm; printf(\"\\t1 - First Fit\\n\"); printf(\"\\t2 - Best Fit \\n\"); printf(\"\\t3 - Worst Fit \\n\"); printf(\"\\t4 - Next Fit\\n\"); printf(\"Please input your choice : \"); scanf(\"%d\", \u0026algorithm); if (algorithm \u003e= 1 \u0026\u0026 algorithm \u003c= 4) ma_algorithm = algorithm; rearrange(ma_algorithm); } /*为每一个进程分配完内存以后重新按已选择的算法再次排序*/ void rearrange(int algorithm) { switch (algorithm) { case MA_FF: rearrange_FF(); break; case MA_BF: rearrange_BF(); break; case MA_WF: rearrange_WF(); break; case MA_NF: rearrange_NF(); break; } } /*首次适应算法，按地址的大小由小到大排序*/ void rearrange_FF() { free_block_type *temp, *p = NULL; free_block_type *head = NULL; int current_min_addr; if (free_block) { temp = free_block; current_min_addr = free_block-\u003estart_addr; while (temp-\u003enext != NULL) { if (temp-\u003enext-\u003estart_addr \u003c current_min_addr) { current_min_addr = temp-\u003enext-\u003estart_addr; p = temp; } temp = temp-\u003enext; } if (p != NULL) { temp = p-\u003enext; p-\u003enext = p-\u003enext-\u003enext; temp-\u003enext = free_block; free_block = temp; } head = free_block; p = head; temp = head-\u003enext; while (head-\u003enext != NULL) { current_min_addr = head-\u003enext-\u003estart_addr; while (temp-\u003enext != NULL) { if (temp-\u003enext-\u003estart_addr \u003c current_min_addr) { current_min_addr = temp-\u003enext-\u003estart_addr; p = temp; } temp = temp-\u003enext; } if (p-\u003enext != head-\u003enext) { temp = p-\u003enext; p-\u003enext = p-\u003enext-\u003enext; temp-\u003enext = head-\u003enext; head-\u003enext = temp; } head = head-\u003enext; temp = head-\u003enext; p = head; } } return; } /*最佳适应算法，按内存块的大小由小到大排序*/ void rearrange_BF() { free_block_type *temp, *p = NULL; free_block_type *head = NULL; int current_min_size = free_block-\u003esize; temp = free_block; whi","date":"2021-06-12","objectID":"/posts/%E5%8A%A8%E6%80%81%E5%88%86%E5%8C%BA%E5%88%86%E9%85%8D%E7%AE%97%E6%B3%95/:0:0","tags":["操作系统","C++"],"title":"动态分区分配算法","uri":"/posts/%E5%8A%A8%E6%80%81%E5%88%86%E5%8C%BA%E5%88%86%E9%85%8D%E7%AE%97%E6%B3%95/"},{"categories":[["二进制玄学"]],"content":"计算机图形学——学习笔记 前言 :::info 终于迈出学习计算机图形学的第一步了…… ::: ++喜欢上计算机图形学的起因大概是听了传奇程序员==约翰·卡马克==的故事，这位推动了3D发展的大佬给我留下了无比深刻的印象。++{.dot} 约翰·卡马克约翰·卡马克 \" 约翰·卡马克 再加上我对渲染、光追、VR、AR等等也都很感兴趣，就想去了解更多，于是也就有了这篇记录博客。{.danger} 计划第一步——GAMES101-现代计算机图形学入门 ++计划先观看闫令琪大佬的视屏：GAMES101-现代计算机图形学入门++{.wavy} {% links %} site: GAMES101-现代计算机图形学入门 owner: 闫令琪 url: https://www.bilibili.com/video/BV1X7411F744?from=search\u0026seid=16228307511649123560 desc: 闫令琪 image: https://tva4.sinaimg.cn/large/008ieO5lly8gpxh7gr2ajj308c08c3yp.jpg color: “#e9546b” {% endlinks %} 编辑器当然还是用我最喜欢的VIM !!虽然视屏里闫令琪老师极其不推荐，但我用了挺多插件，真的顺手…….!! 开发环境我决定使用实体机，因为不喜欢用虚拟机，尤其是其他发行版的Linux……{.danger} 视屏里的作业首先需要下载编译器和两个库，ArchLinux可以直接执行以下命令安装： sudo pacman -S gcc make cmake eigen opencv vtk hdf5 glew Eigen是矩阵库，OpenCV是视觉和机器学习软件库（实测最新的版本4.x也可以） gcc是编译器，CMake是一个跨平台的安装（编译）工具 其他部分是依赖 :::success 从入门到放弃的{.danger} 进度 ::: ","date":"2021-05-16","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:0:0","tags":["C++","计算机图形学"],"title":"计算机图形学——学习笔记","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":[["二进制玄学"]],"content":"视屏进度 ;;;id1 P1——P5 P1 图形学概述 P2 线性代数回顾：点乘(方向角度)、叉乘(判断左右、内外)、矩阵(基础概念) P3 2D仿射变换：(线性变换)旋转、平移(水温逐渐升高) P4 3D变换、观测(视图、投影)、正交、透视投影(青蛙煮熟了) P5 三角形光栅化(采样)、缩放、平移、旋转 ;;; ;;;id1 P6——P10 P6 光栅化(反走样、深度缓冲)、Artifacts、先做模糊(滤波)再采样、时域的卷积=频域的乘积、MSAA(多重采样抗锯齿，同一像素增加了采样点)、FXAA(快速近似抗锯齿，不是采样，先模糊，再替换边界锯齿)、TAA(时间近似抗锯齿，复用上一帧)、Super resolution(超分辨率)、DLSS !!深度学习==猜，淦!! P7 可见性遮挡(深度缓存)、着色、画家算法、Z-Buffer(例如深度一样游戏会闪就是)、shading(着色不同材质)、漫反射(和观测方向无关) P8 Blinn-Phong着色模型、高光(半程向量和法向量是否足够接近，余弦的指数一般用100——200)、环境光(大胆假设：常数)、着色频率(每个面片、顶点、像素)、实时渲染(图形)管线、shader(着色器)、纹理映射 P9 纹理的应用、重心坐标插值(为得到顶点间平滑的过度)、纹理贴图(纹理低分辨率时Bilinear双线性插值)、双向三阶插值(Bicubic)、纹理太大会丢失细节(又是走样!)、Mipmap(范围查询、只能近似方形)、log2 L、三线性插值(纹理内部双线性插值，Mipmap层之间插值)得到连续的图、Overblur(Mipmap用了近似)、各向异性过滤(矩形区域) P10 环境光照(环境光纹理)、cubemap、凹凸贴图、位移贴图、几何？？？ ;;; ;;;id1 P11——P15 P11 P12 P13 P14 P15 ;;; ;;;id1 P16——P20 P16 P17 P18 P19 P20 ;;; ;;;id1 P21——P23 P21 P22 P23 ;;; ","date":"2021-05-16","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:1:0","tags":["C++","计算机图形学"],"title":"计算机图形学——学习笔记","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":[["二进制玄学"]],"content":"作业进度 作业0 还行，能做 作业1 人类迷惑行为？代公式，懂了 作业2 怀疑智商…MSAA的黑线好难改 作业3 作业4 作业5 作业6 作业7 !!不能放弃，坚持！!! ","date":"2021-05-16","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:2:0","tags":["C++","计算机图形学"],"title":"计算机图形学——学习笔记","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":[["二进制玄学"]],"content":"笔记大纲 Transformation 变换 Model 模型变换 View 视图变换 Projection 投影 Rasterization 光栅化 Viewport 视口变换 Sample 采样 Antialisaing 反走样 Z-Buffering 深度缓冲 Shading 着色 Illumination 光照(Blinn-Phong着色模型) Diffuse 漫反射 Specular 高光 Ambient 环境光 shading frequencies 着色频率 Flat shading 逐面着色 Gouraud shading 逐顶点着色 Phong shading 逐像素着色 pipline 管线 实时渲染管线流程 shader 着色器 第二步——Fundamentals of Computer Graphics !!英文也太难啃了，看一眼就头大了!!{.bulr} 学习更新记录 !!2021-05-24!! !!2021-05-30!! 没啥好的记笔记方法，等一波小米的平板出了再继续学习。。。 2021-06-26 重装系统忘记备份作业代码了。。。更新鸽了 2021-09-18 买了平板！可以在pdf课件上记笔记啦，方便多了！重启学习计划！ 2021-09-19 完成P3, Hw0 2021-09-23 完成P4-5, Hw1 2021-09-26 完成P6-7, Hw2 MSAA黑线问题：先渲染绿色三角形后，边界为绿色和黑色的混合。再渲染蓝色三角形时，因为只维护了像素点的深度信息，判定蓝色三角形这条边上的像素比绿色远，不进行渲染，无法覆盖绿黑边像素。解决方法：增加深度buffer大小，将所有采样点的深度信息都进行维护，这样绿色边界只有三个采样点较近，还有一个为黑色无穷远，这一个采样点被下方的蓝色同一采样点的深度信息替换。这样，两三角形的交界处的一个像素内有三个绿色采样点，一个蓝色采样点。颜色为他们的混合，3/4绿色 + 1/4蓝色。 ","date":"2021-05-16","objectID":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:3:0","tags":["C++","计算机图形学"],"title":"计算机图形学——学习笔记","uri":"/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":[["二进制玄学"]],"content":"安装前的准备工作 ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:0:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"下载镜像 可以去北京外国语(bfsu)大学的镜像站获取最新的iso，地址如下：广度优先搜索(bfsu)大学开源镜像站 ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:1:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"准备一个U盘 任意品牌，最好是USB3.0以上的，8G就够 ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:2:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"制作启动盘 win10系统推荐使用rufus软件烧录：rufus linux系统可以直接使用dd命令烧录： sudo dd if=Archlinux_name.iso of=/dev/sdb 基础系统安装 ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:3:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"确认是否为 UEFI 模式 ls /sys/firmware/efi/efivars 若输出了一堆东西，即 efi 变量，则说明已在 UEFI 模式。否则请确认你的启动方式是否为 UEFI。 ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:4:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"启动参数修改(optional) 若正常启动后花屏,说明显卡驱动有问题(例如NVIDIA显卡太新还没有开源驱动) 启动项按e添加modprobe.blacklist=nouveau以禁用开源驱动 ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:5:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"使用iwd联网 iwctl device list station wlan0 scan station wlan0 connect \"网络名_xxx\" ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:6:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"更新系统时间 timedatectl set-ntp true timedatectl status ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:7:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"分区 我在/dev/nvme0n1这块硬盘上分了四个区 /boot 分256M ef00 swap 分８G 8200 / 分100G 8304 /home 分300G 8302 使用以下命令分区 lsblk gdisk /dev/nvme0n1 用d删除旧分区 用n按上面列出的新建分区 用w确定并退出 接下来格式化分区 mkfs.fat -F32 /dev/nvme0n1p1 mkswap /dev/nvme0n1p2 swapon /dev/nvme0n1p2 mkfs.xfs /dev/nvme0n1p3 mkfs.xfs /dev/nvme0n1p4 然后挂载分区 mount /dev/nvme0n1p3 /mnt mkdir /mnt/boot mkdir /mnt/home mount /dev/nvme0n1p1 /mnt/boot mount /dev/nvme0n1p4 /mnt/home ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:8:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"选择镜像 vim /etc/pacman.d/mirrorlist 最上面填入： Server = https://mirrors.bfsu.edu.cn/archlinux/$repo/os/$arch ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:9:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"安装必须软件包 pacstrap /mnt bash-completion iwd dhcpcd base base-devel linux linux-firmware linux-headers man man-db man-pages texinfo vim xfsprogs ntfs-3g nvidia nvidia-utils nvidia-settings opencl-nvidia ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:10:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"生成Fstab genfstab -U /mnt \u003e\u003e /mnt/etc/fstab vim /mnt/etc/fstab ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:11:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"Chroot至新系统 arch-chroot /mnt ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:12:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"本地化 ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime hwclock --systohc vim /etc/locale.gen 取消注释zh_CN.UTF-8和en_US.UTF-8 locale-gen vim /etc/locale.conf 填入LANG=en_US.UTF-8 ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:13:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"网络配置 vim /etc/hostname 填入自己的主机名，例如AORUS vim /etc/hosts 填入如下，要注意主机名相同 127.0.0.1 localhost ::1 localhost 127.0.1.1 AORUS.localdomain AORUS ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:14:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"生成Initramfs mkinitcpio -P ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:15:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"设置密码 passwd ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:16:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"安装grub pacman -Sy grub efibootmgr os-prober cd ~ mkdir MS mount /dev/nvme1n1p1 MS #要注意os_prober已经默认不识别其他系统了 vim /etc/default/grub 最后一行填入GRUB_DISABLE_OS_PROBER=false grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=Arch --recheck grub-mkconfig -o /boot/grub/grub.cfg exit umount -R /mnt reboot 桌面环境安装 ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:17:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"联网 systemctl start iwd dhcpcd iwctl station wlan0 connect \"网络名_xxx\" ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:18:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"新建用户并授权 useradd -m -G wheel 用户名(limbo) EDITOR=vim visudo 取消注释 %wheel ALL=(ALL) ALL exit 以新用户重新登陆 ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:19:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"安装桌面 安装gnome40桌面 sudo pacman -S xorg gdm gnome gnome-tweaks chrome-gnome-shell ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:20:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"自启动设置 sudo systemctl preset-all sudo systemctl enable gdm sudo systemctl enable NetworkManager sudo systemctl enable bluetooth ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:21:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"配置CN源 vim /etc/pacman .conf 加入以下内容 [archlinuxcn] Server = https://mirrors.bfsu.edu.cn/archlinuxcn/$arch ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:22:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"pacman配置 vim /etc/pacman.conf 吃豆人、升级前后对比版本 Color ILoveCandy VerbosePkgLists ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:23:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"安装常用软件 sudo pacman -S zsh alacritty git wget typora telegram google-chrome chromium neofetch gcc gdb clang llvm nodejs yarn visual-studio-code-bin ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:24:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"挂起设置 vim /etc/fstab 把swap的UUID复制下来 sudo vim /etc/default/grub 在GRUB_CMDLINE_LINUX_DEFAULT里添加例如如下的UUID resume=UUID=b184a7a0-a9c4-431c-b0a7-f50bbf052eb5 sudo vim /etc/mkinitcpio.conf 修改例如如下的内容 HOOKS=(base udev resume autodetect modconf block filesystems keyboard fsck) 软件安装配置 ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:25:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"dotfiles 我个人的dotfiles，请根据自身情况修改 ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:26:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"配置环境变量 ;;;id1 vi .xprofile 填入dotfiles里的系统环境变量 ;;; ;;;id1 vi .gitconfig 填入dotfiles里的git环境变量 ;;; ;;;id1 vi .yarnrc 填入dotfiles里的yarn环境变量 ;;; ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:27:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"clash代理 sudo pacman -S clash 先运行一下clash下载db文件，下不动可以去dotfiles里捞 更新配置文件 cd .config/clash wget 代理链接 -O config.yaml 设置开机自启动 systemctl –user enable clash.service ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:28:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"安装Fcitx5输入法 sudo pacman -S fcitx5-im fcitx5-chinese-addons 另外 CN 源有词库可用： sudo pacman -S fcitx5-pinyin-{zhwiki,moegirl} 支持qt和gtk安装以下依赖 sudo pacman -S fcitx5-qt fcitx5-gtk 主题配置参考：fcitx5-material-color，安装完成后直接用dotfiles的配置文件 sudo pacman -S fcitx5-material-color ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:29:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"fontconfig 先在.local/share/font把需要的字体放好，再从dotfiles里捞fontconfig 还有以下字体推荐安装： sudo pacman -S noto-fonts noto-fonts-extra noto-fonts-cjk noto-fonts-emoji ttf-sarasa-gothic ttf-nerd-fonts-symbols-mono ttf-opensans adobe-source-code-pro-fonts adobe-source-sans-pro-fonts adobe-source-serif-pro-fonts ttf-jetbrains-mono wqy-zenhei ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:30:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"Alacritty终端 安装完成后直接从dotfiles捞配置 ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:31:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"zsh 在.config/zsh下捞配置即可 sudo pacman -S exa cd plugins git clone https://github.com/zdharma/fast-syntax-highlighting.git git clone https://github.com/skywind3000/z.lua.git git clone https://github.com/zsh-users/zsh-autosuggestions.git 新建.cache/zsh/history存放记录 ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:32:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"proxychains sudo pacman -S proxychains-ng sudo vim /etc/proxychains.conf 最后填入socks5 127.0.0.1 7891 ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:33:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"yarn 捞配置文件里 .yarnrc ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:34:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"neovim sudo pacman -S neovim nodejs yarn python python-neovim xsel nvim :checkhealth不用管ruby(我不用) ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:35:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"plug install 安装vim-plug：https://github.com/junegunn/vim-plug sh -c 'curl -fLo \"${XDG_DATA_HOME:-$HOME/.local/share}\"/nvim/site/autoload/plug.vim --create-dirs \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim' 捞dotfiles最后 :PlugInstall ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:35:1","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"coc.nvim CocInstall coc-marketplace CocList markeyplace coc-word coc-tabnine coc-snippets coc-pairs coc-highlight coc-clangd coc-java ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:35:2","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"coc-java 格式化 vi rc.d/03-plugins-settings.vim 添加函数和快捷键 \" Add :Format command to format current buffer. command! -nargs=0 Format :call CocAction(‘format’) nnoremap lf :Format CocCommand java.open.formatter.settings (需要打开一个java文件) https://github.com/google/styleguide/blob/gh-pages/eclipse-java-google-style.xml 粘贴进去 ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:35:3","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"neoformat c/cpp格式化 clang-format –dump-config –style=\"{BasedOnStyle: llvm, IndentWidth: 4}\" \u003e .clang-format java格式化 sudo pacman -S astyle echo “–style=java” \u003e .astylerc (该方法效果一般，已弃用) xml格式化 sudo pacman -S tidy ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:35:4","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"highlight neovim 0.5版本以后使用nvim-treesitter https://github.com/nvim-treesitter/nvim-treesitter :TSInstall {language} ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:35:5","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"hexo博客恢复 yarn global add hexo-cli cd Blog yarn 然后deasync这玩意有可能不对，重装它吧...... yarn add deasync ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:36:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"telegram 记得登陆之前先把TG的代理设好，TG默认是使用系统代理的 ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:37:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"chrome ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:38:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"SwitchyOmega global socks5 127.0.0.1 7891 auto switch 规则列表规则 global 默认情景模式 直接连接 AutoProxy https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/fullgfwlist.acl ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:38:1","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"Tampermonkey 全放在chrome书签栏里了 ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:38:2","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"VSCode 插件 One Dark Pro Cloudmusic cpp全家桶 java全家桶 字体 ‘JetBrains Mono’,‘MesloLGS NF’,‘Sarasa Mono SC’,‘monospace’,‘Droid Sans Mono’, monospace, ‘Droid Sans Fallback’ 控制字体大小 19 终端字体大小 16 主题 Window: Title Bar Style One Dark Pro 键映射 !!用惯了Vim实在习惯不了UpArrow / DownArrow补全!!{.danger} “key”: “tab” “command”: “selectNextSuggestion” “key”: “shift+tab”, “command”: “selectPrevSuggestion” ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:39:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"maven 设置镜像 vi .m2/settings.xml \u003csettings\u003e \u003cmirrors\u003e \u003cmirror\u003e \u003cid\u003enexus-tencentyun\u003c/id\u003e \u003cmirrorOf\u003e*\u003c/mirrorOf\u003e \u003cname\u003eNexus tencentyun\u003c/name\u003e \u003curl\u003e http://mirrors.cloud.tencent.com/nexus/repository/maven-public/\u003c/url\u003e \u003c/mirror\u003e \u003c/mirrors\u003e \u003c/settings\u003e ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:40:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"其他软件 ImageMagick 安装后可使用display命令 android-tools 安卓工具包(adb等) 美化 根据自己喜好来吧，可以参考 https://www.gnome-look.org ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:41:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"gnome-shell-extensions AppIndicator and KStatusNotifierItem Support 托盘图标支持 ArcMenu Dash to Panel 在gnome40上可用 Dash to Dock 暂未更新gnome40 Espresso 小咖啡，记得把它配置里的消息提醒关了 Native Window Placement 缩小托盘图标间距 No overview at start-up 在gnome40上开机不自动overview OpenWeather Removable Drive Menu 托盘移除U盘 Screenshot Tool Transparent Top Bar User Themes Workspace Indicator 工作区 ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:42:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"外观 ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:43:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"应用程序 \u0026 Shell aur软件先git clone，cd进入软件目录 makepkg -si matcha-sea ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:43:1","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"光标 aur软件 xcursor-breeze ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:43:2","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"图标 sudo pacman -S papirus-icon-theme aur软件 papirus-folders-git papirus-folders -C teal –theme Papirus-Light ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:43:3","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"grub vimix-grub-theme git clone https://github.com/vinceliuice/grub2-themes.git sudo ./install.sh -b -t vimix -i white 疑难问题(optional) ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:43:4","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"修gdm和nvidia冲突bug(Fuck NVIDIA!) 有个版本内核gdm和nvidia驱动冲突了，会卡gdm黑屏 把nvidia启动写进kernel modules，提前启动 sudo nvim /etc/mkinitcpio.conf MODULES=(nvidia nvidia_modeset nvidia_uvm nvidia_drm) HOOKS=(base udev autodetect modconf block filesystems keyboard fsck) sudo nvim /etc/default/grub 内核参数加nvidia-drm.modeset=1 sudo mkinitcpio -P sudo grub-mkconfig -o /boot/grub/grub.cfg ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:44:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"},{"categories":[["二进制玄学"]],"content":"更新Chrome后每个网页都崩溃 系统设置里开启网络代理，手动 或者sudo systemctl disable systemd-resolved(可能会导致DN42域名解析错误等等) ","date":"2021-04-26","objectID":"/posts/arch-linux%E6%8C%87%E5%8D%97/:45:0","tags":["教程","Linux"],"title":"Arch Linux指南","uri":"/posts/arch-linux%E6%8C%87%E5%8D%97/"}]
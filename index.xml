<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Horel&#39;s Blog</title>
        <link>http://graficc.github.io/</link>
        <description>Welcome to Horel&#39;s blog.</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1494255412@mail.dlut.edu.cn (Horel)</managingEditor>
            <webMaster>1494255412@mail.dlut.edu.cn (Horel)</webMaster><lastBuildDate>Sun, 21 Nov 2021 21:09:34 &#43;0000</lastBuildDate>
            <atom:link href="http://graficc.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>CMake Example</title>
    <link>http://graficc.github.io/posts/cmake-example/</link>
    <pubDate>Sun, 21 Nov 2021 21:09:34 &#43;0000</pubDate><author>1494255412@mail.dlut.edu.cn (Horel)</author><guid>http://graficc.github.io/posts/cmake-example/</guid>
    <description><![CDATA[<h1 id="cmake-example">CMake Example</h1>
<p>因为众所周知的原因 <del>CMake限制了C++的发展</del></p>
<p>不得不简单学习了一下CMake的使用，列在这里</p>
<h2 id="cmake文件">CMake文件</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span><span class="lnt">211
</span><span class="lnt">212
</span><span class="lnt">213
</span><span class="lnt">214
</span><span class="lnt">215
</span><span class="lnt">216
</span><span class="lnt">217
</span><span class="lnt">218
</span><span class="lnt">219
</span><span class="lnt">220
</span><span class="lnt">221
</span><span class="lnt">222
</span><span class="lnt">223
</span><span class="lnt">224
</span><span class="lnt">225
</span><span class="lnt">226
</span><span class="lnt">227
</span><span class="lnt">228
</span><span class="lnt">229
</span><span class="lnt">230
</span><span class="lnt">231
</span><span class="lnt">232
</span><span class="lnt">233
</span><span class="lnt">234
</span><span class="lnt">235
</span><span class="lnt">236
</span><span class="lnt">237
</span><span class="lnt">238
</span><span class="lnt">239
</span><span class="lnt">240
</span><span class="lnt">241
</span><span class="lnt">242
</span><span class="lnt">243
</span><span class="lnt">244
</span><span class="lnt">245
</span><span class="lnt">246
</span><span class="lnt">247
</span><span class="lnt">248
</span><span class="lnt">249
</span><span class="lnt">250
</span><span class="lnt">251
</span><span class="lnt">252
</span><span class="lnt">253
</span><span class="lnt">254
</span><span class="lnt">255
</span><span class="lnt">256
</span><span class="lnt">257
</span><span class="lnt">258
</span><span class="lnt">259
</span><span class="lnt">260
</span><span class="lnt">261
</span><span class="lnt">262
</span><span class="lnt">263
</span><span class="lnt">264
</span><span class="lnt">265
</span><span class="lnt">266
</span><span class="lnt">267
</span><span class="lnt">268
</span><span class="lnt">269
</span><span class="lnt">270
</span><span class="lnt">271
</span><span class="lnt">272
</span><span class="lnt">273
</span><span class="lnt">274
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cmake" data-lang="cmake"><span class="line"><span class="cl"><span class="c">#===================================================#
</span></span></span><span class="line"><span class="cl"><span class="c">#           CMakeLists.txt -- rootFolder
</span></span></span><span class="line"><span class="cl"><span class="c">#===================================================#
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 变量解释
</span></span></span><span class="line"><span class="cl"><span class="c"># PROJECT_SOURCE_DIR       --- project root path
</span></span></span><span class="line"><span class="cl"><span class="c"># PROJECT_BINARY_DIR       --- cmake 编译所在的目录 path
</span></span></span><span class="line"><span class="cl"><span class="c"># CMAKE_SOURCE_DIR         --- current CMakeLists.txt path
</span></span></span><span class="line"><span class="cl"><span class="c"># CMAKE_CURRENT_SOURCE_DIR --- current sub CMakeLists.txt path
</span></span></span><span class="line"><span class="cl"><span class="c"># CMAKE_BINARY_DIR         --- run cmake .. path
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#---------------------------------------------------#
</span></span></span><span class="line"><span class="cl"><span class="c">#                cmake version
</span></span></span><span class="line"><span class="cl"><span class="c">#---------------------------------------------------#
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">cmake_minimum_required</span><span class="p">(</span><span class="s">VERSION</span> <span class="s">3.1</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">message</span><span class="p">(</span> <span class="s">STATUS</span> <span class="s2">&#34;CMake Version: ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION}&#34;</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#---------------------------------------------------#
</span></span></span><span class="line"><span class="cl"><span class="c">#                    OS
</span></span></span><span class="line"><span class="cl"><span class="c">#---------------------------------------------------#
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">if</span><span class="p">(</span> <span class="s">APPLE</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">option</span><span class="p">(</span> <span class="s">TPR_OS_MACOSX_</span> <span class="s2">&#34; MACOSX &#34;</span> <span class="s">ON</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">option</span><span class="p">(</span> <span class="s">TPR_OS_UNIX_</span> <span class="s2">&#34; UNIX &#34;</span> <span class="s">ON</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">message</span><span class="p">(</span> <span class="s">STATUS</span> <span class="s2">&#34;___APPLE___&#34;</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">elseif</span><span class="p">(</span> <span class="s">UNIX</span> <span class="s">AND</span> <span class="s">NOT</span> <span class="s">APPLE</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">option</span><span class="p">(</span> <span class="s">TPR_OS_LINUX_</span> <span class="s2">&#34; LINUX &#34;</span> <span class="s">ON</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">option</span><span class="p">(</span> <span class="s">TPR_OS_UNIX_</span> <span class="s2">&#34; UNIX &#34;</span> <span class="s">ON</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">message</span><span class="p">(</span> <span class="s">STATUS</span> <span class="s2">&#34;___UNIX___&#34;</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#-- 当使用 Virsual Studio 编译 cmake项目时，可用 WIN32
</span></span></span><span class="line"><span class="cl"><span class="c">#   如果出错，尝试改用 MSVC
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">elseif</span><span class="p">(</span> <span class="s">WIN32</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">option</span><span class="p">(</span> <span class="s">TPR_OS_WIN32_</span> <span class="s2">&#34; WIN32 &#34;</span> <span class="s">ON</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">message</span><span class="p">(</span> <span class="s">STATUS</span> <span class="s2">&#34;___WIN32___&#34;</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">endif</span><span class="p">(</span> <span class="s">APPLE</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#---- Must before project!!! ----
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#---------------------------------------------------#
</span></span></span><span class="line"><span class="cl"><span class="c">#                c++ standard
</span></span></span><span class="line"><span class="cl"><span class="c">#---------------------------------------------------#
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">set</span> <span class="p">(</span><span class="s">CMAKE_CXX_STANDARD</span> <span class="s">17</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">set</span> <span class="p">(</span><span class="s">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="s">ON</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">set</span> <span class="p">(</span><span class="s">CMAKE_CXX_EXTENSIONS</span> <span class="s">OFF</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#---------------------------------------------------#
</span></span></span><span class="line"><span class="cl"><span class="c">#                project name
</span></span></span><span class="line"><span class="cl"><span class="c">#---------------------------------------------------#
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">project</span> <span class="p">(</span> <span class="s">Project_Name</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#---------------------------------------------------#
</span></span></span><span class="line"><span class="cl"><span class="c">#                project version
</span></span></span><span class="line"><span class="cl"><span class="c">#---------------------------------------------------#
</span></span></span><span class="line"><span class="cl"><span class="c">#-- *** test: 0.1 ***
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">set</span> <span class="p">(</span> <span class="s">VERSION_MAJOR</span> <span class="s">0</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">set</span> <span class="p">(</span> <span class="s">VERSION_MINOR</span> <span class="s">1</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#---------------------------------------------------#
</span></span></span><span class="line"><span class="cl"><span class="c">#                   build/publish/
</span></span></span><span class="line"><span class="cl"><span class="c">#---------------------------------------------------#
</span></span></span><span class="line"><span class="cl"><span class="c">#-- change finally exe out-path: build/publish
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">set</span> <span class="p">(</span><span class="s">EXECUTABLE_OUTPUT_PATH</span> <span class="o">${</span><span class="nv">PROJECT_BINARY_DIR</span><span class="o">}</span><span class="s">/publish</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_ARCHIVE_OUTPUT_DIRECTORY</span> <span class="o">${</span><span class="nv">CMAKE_BINARY_DIR</span><span class="o">}</span><span class="s">/lib</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_LIBRARY_OUTPUT_DIRECTORY</span> <span class="o">${</span><span class="nv">CMAKE_BINARY_DIR</span><span class="o">}</span><span class="s">/lib</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_RUNTIME_OUTPUT_DIRECTORY</span> <span class="o">${</span><span class="nv">CMAKE_BINARY_DIR</span><span class="o">}</span><span class="s">/publish</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 确认一些 变量值：
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">message</span><span class="p">(</span><span class="s">STATUS</span> <span class="s2">&#34;[__INFO__] CMAKE_BINARY_DIR: ${CMAKE_BINARY_DIR}&#34;</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">message</span><span class="p">(</span><span class="s">STATUS</span> <span class="s2">&#34;[__INFO__] PROJECT_BINARY_DIR: ${PROJECT_BINARY_DIR}&#34;</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">message</span><span class="p">(</span><span class="s">STATUS</span> <span class="s2">&#34;[__INFO__] CMAKE_RUNTIME_OUTPUT_DIRECTORY: ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}&#34;</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#---------------------------------------------------#
</span></span></span><span class="line"><span class="cl"><span class="c">#                 SySconfig
</span></span></span><span class="line"><span class="cl"><span class="c">#          宏定义系统OS类型，CMake版本等
</span></span></span><span class="line"><span class="cl"><span class="c">#---------------------------------------------------#
</span></span></span><span class="line"><span class="cl"><span class="c">#-- 配置 一个 h文件，用来 从 cmake 传递一些 变量 到 源文件 中。
</span></span></span><span class="line"><span class="cl"><span class="c">#-- 我们需要手动编写 .h.in 文件。
</span></span></span><span class="line"><span class="cl"><span class="c">#-- 然后，cmake调用会 帮我们自动生成对应的 h文件。
</span></span></span><span class="line"><span class="cl"><span class="c">#-- 最后，正式 make编译时。源文件 就能 include 这些生成的 h文件。
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">option</span><span class="p">(</span> <span class="s">SWITCH_1</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34; option test: switch 1 &#34;</span> <span class="s">ON</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">configure_file</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;${CMAKE_CURRENT_SOURCE_DIR}/sysconfig/SysConfig.h.in&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;${EXECUTABLE_OUTPUT_PATH}/sysconfig/SysConfig.h&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#---------------------------------------------------#
</span></span></span><span class="line"><span class="cl"><span class="c">#                    src (.cpp/.c)
</span></span></span><span class="line"><span class="cl"><span class="c">#---------------------------------------------------#
</span></span></span><span class="line"><span class="cl"><span class="c">#-- 创建变量 PIXEL_FILES （是个 list）
</span></span></span><span class="line"><span class="cl"><span class="c">#-- 包含 主进程需要的所有 .c/.cpp 文件
</span></span></span><span class="line"><span class="cl"><span class="c">#   GLOB_RECURSE 会递归访问目录，这是一种粗粒度的写法
</span></span></span><span class="line"><span class="cl"><span class="c">#   如果想要精细控制，应该改用 GLOB 
</span></span></span><span class="line"><span class="cl"><span class="c">#   请把所有 .c/.cpp 文件写入 src 目录，及其递归子目录下，
</span></span></span><span class="line"><span class="cl"><span class="c">#   然后就什么都不用管了
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">FILE</span><span class="p">(</span><span class="s">GLOB_RECURSE</span>   <span class="s">PIXEL_FILES</span>   
</span></span><span class="line"><span class="cl">                    <span class="o">${</span><span class="nv">CMAKE_CURRENT_SOURCE_DIR</span><span class="o">}</span><span class="s">/src/*.cpp</span>
</span></span><span class="line"><span class="cl">                    <span class="o">${</span><span class="nv">CMAKE_CURRENT_SOURCE_DIR</span><span class="o">}</span><span class="s">/src/*.c</span>
</span></span><span class="line"><span class="cl">                    <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#---------------------------------------------------#
</span></span></span><span class="line"><span class="cl"><span class="c">#                   App_Name
</span></span></span><span class="line"><span class="cl"><span class="c">#---------------------------------------------------#
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">if</span><span class="p">(</span> <span class="o">${</span><span class="nv">CMAKE_VERSION</span><span class="o">}</span> <span class="s">VERSION_GREATER_EQUAL</span> <span class="s">3.16</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">set</span> <span class="p">(</span> <span class="s">CMAKE_UNITY_BUILD_BATCH_SIZE</span> <span class="s">16</span> <span class="p">)</span> <span class="c"># 10 ～ 20
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">endif</span><span class="p">()</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">add_executable</span><span class="p">(</span> <span class="s">App_Name</span> <span class="o">${</span><span class="nv">PIXEL_FILES</span><span class="o">}</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#-- set libs/dlls output-name --&gt; &#34;App_Name.xxx&#34;
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">set_target_properties</span><span class="p">(</span><span class="s">App_Name</span> <span class="s">PROPERTIES</span> <span class="s">PREFIX</span> <span class="s2">&#34;&#34;</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">set_target_properties</span><span class="p">(</span><span class="s">App_Name</span> <span class="s">PROPERTIES</span> <span class="s">OUTPUT_NAME</span> <span class="s2">&#34;App_Name&#34;</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">if</span><span class="p">(</span> <span class="o">${</span><span class="nv">CMAKE_VERSION</span><span class="o">}</span> <span class="s">VERSION_GREATER_EQUAL</span> <span class="s">3.16</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">target_precompile_headers</span><span class="p">(</span> <span class="s">App_Name</span> <span class="s">PRIVATE</span> <span class="o">${</span><span class="nv">CMAKE_CURRENT_SOURCE_DIR</span><span class="o">}</span><span class="s">/src/_pch_/pch.h</span> <span class="p">)</span> <span class="c"># PCH
</span></span></span><span class="line"><span class="cl"><span class="c"></span>    <span class="nb">set_target_properties</span><span class="p">(</span> <span class="s">App_Name</span> <span class="s">PROPERTIES</span> <span class="s">UNITY_BUILD</span> <span class="s">ON</span><span class="p">)</span> <span class="c"># UNITY
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">endif</span><span class="p">()</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#---------------------------------------------------#
</span></span></span><span class="line"><span class="cl"><span class="c">#                   include  （.h/.hpp）
</span></span></span><span class="line"><span class="cl"><span class="c">#---------------------------------------------------#
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># macro():
</span></span></span><span class="line"><span class="cl"><span class="c"># 本宏函数，会在目录 src/ 下检查所有 递归子目录
</span></span></span><span class="line"><span class="cl"><span class="c"># 如果某个目录，内含 .h/.hpp 文件，这个目录就会被收集到一个 list 中
</span></span></span><span class="line"><span class="cl"><span class="c"># 最终返回这个 list
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">MACRO</span><span class="p">(</span> <span class="s">collect_head_dirs</span> <span class="s">return_list</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">FILE</span><span class="p">(</span><span class="s">GLOB_RECURSE</span>   <span class="s">new_list</span> 
</span></span><span class="line"><span class="cl">                        <span class="o">${</span><span class="nv">CMAKE_CURRENT_SOURCE_DIR</span><span class="o">}</span><span class="s">/src/*.h</span>
</span></span><span class="line"><span class="cl">                        <span class="o">${</span><span class="nv">CMAKE_CURRENT_SOURCE_DIR</span><span class="o">}</span><span class="s">/src/*.hpp</span>
</span></span><span class="line"><span class="cl">                        <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">SET</span><span class="p">(</span><span class="s">dir_list</span> <span class="s2">&#34;&#34;</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">FOREACH</span><span class="p">(</span><span class="s">file_path</span> <span class="o">${</span><span class="nv">new_list</span><span class="o">}</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>        <span class="nb">GET_FILENAME_COMPONENT</span><span class="p">(</span><span class="s">dir_path</span> <span class="o">${</span><span class="nv">file_path</span><span class="o">}</span> <span class="s">PATH</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>        <span class="nb">SET</span><span class="p">(</span><span class="s">dir_list</span> <span class="o">${</span><span class="nv">dir_list</span><span class="o">}</span> <span class="o">${</span><span class="nv">dir_path</span><span class="o">}</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">ENDFOREACH</span><span class="p">()</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">LIST</span><span class="p">(</span><span class="s">REMOVE_DUPLICATES</span> <span class="s">dir_list</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">SET</span><span class="p">(</span><span class="o">${</span><span class="nv">return_list</span><span class="o">}</span> <span class="o">${</span><span class="nv">dir_list</span><span class="o">}</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">ENDMACRO</span><span class="p">()</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># call macro
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">collect_head_dirs</span><span class="p">(</span> <span class="s">src_header_dirs</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 打印实际收集到的 目录数目 （无关紧要部分）
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">list</span><span class="p">(</span><span class="s">LENGTH</span> <span class="s">src_header_dirs</span> <span class="s">src_header_dirs_count</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">message</span><span class="p">(</span><span class="s">STATUS</span> <span class="s2">&#34;[INFO] Found ${src_header_dirs_count} header directories.&#34;</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># ===== 设置 include 目录路径 =====
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">target_include_directories</span> <span class="p">(</span> <span class="s">App_Name</span> <span class="s">PUBLIC</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># === 跨平台宏文件（cmake创建） ===
</span></span></span><span class="line"><span class="cl"><span class="c"></span>    <span class="o">${</span><span class="nv">EXECUTABLE_OUTPUT_PATH</span><span class="o">}</span><span class="s">/sysconfig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># === 第三方库 ===
</span></span></span><span class="line"><span class="cl"><span class="c"></span>    <span class="o">${</span><span class="nv">CMAKE_CURRENT_SOURCE_DIR</span><span class="o">}</span><span class="s">/deps/rapidjson</span>
</span></span><span class="line"><span class="cl">    <span class="o">${</span><span class="nv">CMAKE_CURRENT_SOURCE_DIR</span><span class="o">}</span><span class="s">/deps/fmt-6.1.2/include</span>
</span></span><span class="line"><span class="cl">    <span class="c"># 在此处添加更多 第三方库
</span></span></span><span class="line"><span class="cl"><span class="c"></span>    <span class="c"># 具体写法，请查阅各个 库文档
</span></span></span><span class="line"><span class="cl"><span class="c"></span>    <span class="c"># ...
</span></span></span><span class="line"><span class="cl"><span class="c"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># === 项目代码 ===
</span></span></span><span class="line"><span class="cl"><span class="c"></span>    <span class="c"># 自动包含 src/ 目录下的所有 有效目录
</span></span></span><span class="line"><span class="cl"><span class="c"></span>    <span class="o">${</span><span class="nv">src_header_dirs</span><span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 与上一条几乎一样
</span></span></span><span class="line"><span class="cl"><span class="c"># 但是添加了 SYSTEM 关键词。
</span></span></span><span class="line"><span class="cl"><span class="c"># 添加在此的 第三方库，会被屏蔽掉一部分 warnings
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">target_include_directories</span> <span class="p">(</span> <span class="s">App_Name</span> <span class="s">SYSTEM</span> <span class="s">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="o">${</span><span class="nv">CMAKE_CURRENT_SOURCE_DIR</span><span class="o">}</span><span class="s">/deps</span>
</span></span><span class="line"><span class="cl">    <span class="o">${</span><span class="nv">CMAKE_CURRENT_SOURCE_DIR</span><span class="o">}</span><span class="s">/deps/glm.9.9.5</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#---------------------------------------------------#
</span></span></span><span class="line"><span class="cl"><span class="c">#             子目录 CMakeLists.txt
</span></span></span><span class="line"><span class="cl"><span class="c">#---------------------------------------------------#
</span></span></span><span class="line"><span class="cl"><span class="c">#-- 子 CMakeLists.txt 执行的 中间产物，将分别放在 
</span></span></span><span class="line"><span class="cl"><span class="c">#      build/src  build/libhello  目录中。
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">add_subdirectory</span><span class="p">(</span><span class="o">${</span><span class="nv">CMAKE_CURRENT_SOURCE_DIR</span><span class="o">}</span><span class="s">/deps/fmt-6.1.2</span> <span class="s">EXCLUDE_FROM_ALL</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#---------------------------------------------------#
</span></span></span><span class="line"><span class="cl"><span class="c">#             target_link_libraries
</span></span></span><span class="line"><span class="cl"><span class="c">#---------------------------------------------------#
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">if</span> <span class="p">(</span> <span class="s">UNIX</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">target_link_libraries</span><span class="p">(</span> <span class="s">App_Name</span>
</span></span><span class="line"><span class="cl">                            <span class="s">fmt</span>
</span></span><span class="line"><span class="cl">                            <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">else</span><span class="p">()</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">target_link_libraries</span><span class="p">(</span> <span class="s">App_Name</span>
</span></span><span class="line"><span class="cl">                            <span class="s">fmt</span>
</span></span><span class="line"><span class="cl">                            <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">endif</span><span class="p">(</span> <span class="s">UNIX</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 编译选项，可以自行增删
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">target_compile_options</span><span class="p">(</span> <span class="s">App_Name</span>
</span></span><span class="line"><span class="cl">                        <span class="s">PRIVATE</span> 
</span></span><span class="line"><span class="cl">                        <span class="s">-Wall</span> <span class="s">-Wextra</span>
</span></span><span class="line"><span class="cl">                        <span class="s">-Wno-c++98-compat</span>
</span></span><span class="line"><span class="cl">                        <span class="s">-Wno-c++98-compat-pedantic</span>
</span></span><span class="line"><span class="cl">                        <span class="s">-Wno-language-extension-token</span>      <span class="c">#- glad
</span></span></span><span class="line"><span class="cl"><span class="c"></span>						<span class="s">-Wno-nonportable-system-include-path</span>
</span></span><span class="line"><span class="cl">						<span class="s">-Wno-reserved-id-macro</span>
</span></span><span class="line"><span class="cl">						<span class="s">-Wno-global-constructors</span>            <span class="c">#++ need ++
</span></span></span><span class="line"><span class="cl"><span class="c"></span>                        <span class="s">-Wno-exit-time-destructors</span>          <span class="c">#++ need ++
</span></span></span><span class="line"><span class="cl"><span class="c"></span>                        <span class="s">-Wno-covered-switch-default</span>         <span class="c">#++ need ++
</span></span></span><span class="line"><span class="cl"><span class="c"></span>                        <span class="s">-Wno-switch-enum</span>                    <span class="c">#++ need ++
</span></span></span><span class="line"><span class="cl"><span class="c"></span>                        <span class="s">-Wno-unused-parameter</span>               <span class="c">#++ need ++
</span></span></span><span class="line"><span class="cl"><span class="c"></span>                        <span class="s">-Wno-unused-member-function</span>         <span class="c">#++ need ++
</span></span></span><span class="line"><span class="cl"><span class="c"></span>                        <span class="s">-Wno-missing-variable-declarations</span>  <span class="c">#++ need ++
</span></span></span><span class="line"><span class="cl"><span class="c"></span>                        <span class="s">-Wno-missing-prototypes</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                        <span class="s">-Wno-old-style-cast</span>   <span class="c">#---- tmp ---- 
</span></span></span><span class="line"><span class="cl"><span class="c"></span>                        <span class="s">-Wno-unused-variable</span> <span class="c">#----- tmp ----
</span></span></span><span class="line"><span class="cl"><span class="c"></span>                        <span class="s">-Wno-unused-private-field</span> <span class="c">#----- tmp ----
</span></span></span><span class="line"><span class="cl"><span class="c"></span>
</span></span><span class="line"><span class="cl">                        <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#=========== 优化设置（非正式） ============
</span></span></span><span class="line"><span class="cl"><span class="c"># 不喜欢这组设置，可以将它彻底删除掉
</span></span></span><span class="line"><span class="cl"><span class="c"># 整体上只做了一次改动：
</span></span></span><span class="line"><span class="cl"><span class="c">#   release 模式，仍然允许 assert 宏起效
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#-------- UNIX ----------
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">if</span><span class="p">(</span> <span class="s">UNIX</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">set</span> <span class="p">(</span> <span class="s">CMAKE_C_FLAGS</span>                  <span class="s2">&#34;-O0&#34;</span>              <span class="s">CACHE</span> <span class="s">STRING</span> <span class="s2">&#34;regular mode: no optimize&#34;</span> <span class="s">FORCE</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">set</span> <span class="p">(</span> <span class="s">CMAKE_C_FLAGS_DEBUG</span>            <span class="s2">&#34;-O0 -g&#34;</span>           <span class="s">CACHE</span> <span class="s">STRING</span> <span class="s2">&#34;debug mode: no optimize&#34;</span> <span class="s">FORCE</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">set</span> <span class="p">(</span> <span class="s">CMAKE_C_FLAGS_MINSIZEREL</span>       <span class="s2">&#34;-O0 -DNDEBUG&#34;</span>     <span class="s">CACHE</span> <span class="s">STRING</span> <span class="s2">&#34;minSizeRel mode: no optimize&#34;</span> <span class="s">FORCE</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">set</span> <span class="p">(</span> <span class="s">CMAKE_C_FLAGS_RELEASE</span>          <span class="s2">&#34;-O2 -DNDEBUG&#34;</span>     <span class="s">CACHE</span> <span class="s">STRING</span> <span class="s2">&#34;release mode: no optimize&#34;</span> <span class="s">FORCE</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">set</span> <span class="p">(</span> <span class="s">CMAKE_C_FLAGS_RELWITHDEBINFO</span>   <span class="s2">&#34;-O2 -g -DNDEBUG&#34;</span>  <span class="s">CACHE</span> <span class="s">STRING</span> <span class="s2">&#34;relWithDebugInfo mode: no optimize&#34;</span> <span class="s">FORCE</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">set</span> <span class="p">(</span> <span class="s">CMAKE_CXX_FLAGS</span>                 <span class="s2">&#34;-O0&#34;</span>             <span class="s">CACHE</span> <span class="s">STRING</span> <span class="s2">&#34;regular mode: no optimize&#34;</span> <span class="s">FORCE</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">set</span> <span class="p">(</span> <span class="s">CMAKE_CXX_FLAGS_DEBUG</span>           <span class="s2">&#34;-O0 -g&#34;</span>          <span class="s">CACHE</span> <span class="s">STRING</span> <span class="s2">&#34;debug mode: no optimize&#34;</span> <span class="s">FORCE</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">set</span> <span class="p">(</span> <span class="s">CMAKE_CXX_FLAGS_MINSIZEREL</span>      <span class="s2">&#34;-O0 -DNDEBUG&#34;</span>    <span class="s">CACHE</span> <span class="s">STRING</span> <span class="s2">&#34;minSizeRel mode: no optimize&#34;</span> <span class="s">FORCE</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">set</span> <span class="p">(</span> <span class="s">CMAKE_CXX_FLAGS_RELEASE</span>         <span class="s2">&#34;-O2 -DNDEBUG&#34;</span>    <span class="s">CACHE</span> <span class="s">STRING</span> <span class="s2">&#34;release mode: no optimize&#34;</span> <span class="s">FORCE</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">set</span> <span class="p">(</span> <span class="s">CMAKE_CXX_FLAGS_RELWITHDEBINFO</span>  <span class="s2">&#34;-O2 -g -DNDEBUG&#34;</span> <span class="s">CACHE</span> <span class="s">STRING</span> <span class="s2">&#34;relWithDebugInfo mode: no optimize&#34;</span> <span class="s">FORCE</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#-------- WIN ----------
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">else</span><span class="p">()</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="c"># do not have CMAKE_C_FLAGS;
</span></span></span><span class="line"><span class="cl"><span class="c"></span>    <span class="nb">set</span> <span class="p">(</span> <span class="s">CMAKE_C_FLAGS_DEBUG</span>            <span class="s2">&#34;/MDd /Zi /Ob0 /Od /RTC1&#34;</span>   <span class="s">CACHE</span> <span class="s">STRING</span> <span class="s2">&#34;debug mode: no optimize&#34;</span> <span class="s">FORCE</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">set</span> <span class="p">(</span> <span class="s">CMAKE_C_FLAGS_MINSIZEREL</span>       <span class="s2">&#34;/MD /O0 /Ob1 /DNDEBUG&#34;</span>     <span class="s">CACHE</span> <span class="s">STRING</span> <span class="s2">&#34;minSizeRel mode: no optimize&#34;</span> <span class="s">FORCE</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">set</span> <span class="p">(</span> <span class="s">CMAKE_C_FLAGS_RELEASE</span>          <span class="s2">&#34;/MD /O2 /Ob1 /DNDEBUG&#34;</span>     <span class="s">CACHE</span> <span class="s">STRING</span> <span class="s2">&#34;release mode: no optimize&#34;</span> <span class="s">FORCE</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">set</span> <span class="p">(</span> <span class="s">CMAKE_C_FLAGS_RELWITHDEBINFO</span>   <span class="s2">&#34;/MD /Zi /O2 /Ob1 /DNDEBUG&#34;</span> <span class="s">CACHE</span> <span class="s">STRING</span> <span class="s2">&#34;relWithDebugInfo mode: no optimize&#34;</span> <span class="s">FORCE</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="c"># do not have CMAKE_CXX_FLAGS;
</span></span></span><span class="line"><span class="cl"><span class="c"></span>    <span class="nb">set</span> <span class="p">(</span> <span class="s">CMAKE_CXX_FLAGS_DEBUG</span>            <span class="s2">&#34;/MDd /Zi /Ob0 /Od /RTC1&#34;</span>   <span class="s">CACHE</span> <span class="s">STRING</span> <span class="s2">&#34;debug mode: no optimize&#34;</span> <span class="s">FORCE</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">set</span> <span class="p">(</span> <span class="s">CMAKE_CXX_FLAGS_MINSIZEREL</span>       <span class="s2">&#34;/MD /O0 /Ob1 /DNDEBUG&#34;</span>     <span class="s">CACHE</span> <span class="s">STRING</span> <span class="s2">&#34;minSizeRel mode: no optimize&#34;</span> <span class="s">FORCE</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">set</span> <span class="p">(</span> <span class="s">CMAKE_CXX_FLAGS_RELEASE</span>          <span class="s2">&#34;/MD /O2 /Ob1 /DNDEBUG&#34;</span>     <span class="s">CACHE</span> <span class="s">STRING</span> <span class="s2">&#34;release mode: no optimize&#34;</span> <span class="s">FORCE</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nb">set</span> <span class="p">(</span> <span class="s">CMAKE_CXX_FLAGS_RELWITHDEBINFO</span>   <span class="s2">&#34;/MD /Zi /O2 /Ob1 /DNDEBUG&#34;</span> <span class="s">CACHE</span> <span class="s">STRING</span> <span class="s2">&#34;relWithDebugInfo mode: no optimize&#34;</span> <span class="s">FORCE</span> <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">endif</span><span class="p">(</span> <span class="s">UNIX</span> <span class="p">)</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="build脚本">Build脚本</h2>
<h3 id="unix构建脚本">Unix构建脚本</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">#------------- prepare dirs ---------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 将 根目录下的一些 资料目录（比如 &#34;shaders&#34;,&#34;jsons&#34; ）</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 复制进 &lt;root&gt;/build/publish/ 目录下</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">DIR_base</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span> <span class="nb">cd</span> <span class="s2">&#34;</span><span class="k">$(</span> dirname <span class="s2">&#34;</span><span class="si">${</span><span class="nv">BASH_SOURCE</span><span class="p">[0]</span><span class="si">}</span><span class="s2">&#34;</span> <span class="k">)</span><span class="s2">&#34;</span> <span class="o">&amp;&amp;</span> <span class="nb">pwd</span> <span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">DIR_out</span><span class="o">=</span><span class="si">${</span><span class="nv">DIR_base</span><span class="si">}</span>/build/publish/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">DIR_src_shaders</span><span class="o">=</span><span class="si">${</span><span class="nv">DIR_base</span><span class="si">}</span>/shaders/
</span></span><span class="line"><span class="cl"><span class="nv">DIR_src_jsons</span><span class="o">=</span><span class="si">${</span><span class="nv">DIR_base</span><span class="si">}</span>/jsons/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">DIR_dst_shaders</span><span class="o">=</span><span class="si">${</span><span class="nv">DIR_out</span><span class="si">}</span>/shaders/
</span></span><span class="line"><span class="cl"><span class="nv">DIR_dst_jsons</span><span class="o">=</span><span class="si">${</span><span class="nv">DIR_out</span><span class="si">}</span>/jsons/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -e <span class="s2">&#34;------------&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -e <span class="s2">&#34;DIR_base: </span><span class="si">${</span><span class="nv">DIR_base</span><span class="si">}</span><span class="s2"> &#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -e <span class="s2">&#34;DIR_out: </span><span class="si">${</span><span class="nv">DIR_out</span><span class="si">}</span><span class="s2"> &#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -e <span class="s2">&#34;------------&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> ! -d <span class="s2">&#34;</span><span class="si">${</span><span class="nv">DIR_out</span><span class="si">}</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    mkdir -p <span class="si">${</span><span class="nv">DIR_out</span><span class="si">}</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> ! -d <span class="s2">&#34;</span><span class="si">${</span><span class="nv">DIR_dst_shaders</span><span class="si">}</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    mkdir -p <span class="si">${</span><span class="nv">DIR_dst_shaders</span><span class="si">}</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> ! -d <span class="s2">&#34;</span><span class="si">${</span><span class="nv">DIR_dst_jsons</span><span class="si">}</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    mkdir -p <span class="si">${</span><span class="nv">DIR_dst_jsons</span><span class="si">}</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Access Permission</span>
</span></span><span class="line"><span class="cl">chmod -R <span class="nv">ug</span><span class="o">=</span>rwx <span class="si">${</span><span class="nv">DIR_out</span><span class="si">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#-----------------------#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># cp -R &#34;dir1&#34;/. &#34;dir2&#34; </span>
</span></span><span class="line"><span class="cl"><span class="c1"># copy files in &#34;dir1&#34;, not copy &#34;dir1&#34; self </span>
</span></span><span class="line"><span class="cl"><span class="c1">#:</span>
</span></span><span class="line"><span class="cl">cp -R <span class="si">${</span><span class="nv">DIR_src_shaders</span><span class="si">}</span>.   <span class="si">${</span><span class="nv">DIR_dst_shaders</span><span class="si">}</span> 
</span></span><span class="line"><span class="cl">cp -R <span class="si">${</span><span class="nv">DIR_src_jsons</span><span class="si">}</span>.     <span class="si">${</span><span class="nv">DIR_dst_jsons</span><span class="si">}</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#------------- build cpp/c# ----------------</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">cmake -DCMAKE_BUILD_TYPE<span class="o">=</span>Release ..
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 多线程加速编译，可自行改写线程数，比如：-j8</span>
</span></span><span class="line"><span class="cl">make -j4
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> ..
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="win构建脚本">Win构建脚本</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">@echo off
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">REM ------------- build cpp ----------------
</span></span><span class="line"><span class="cl">REM before run this shell
</span></span><span class="line"><span class="cl">REM go to Visual Studio first, 
</span></span><span class="line"><span class="cl">REM     <span class="nb">set</span> Build root: <span class="si">${</span><span class="nv">projectDir</span><span class="si">}</span><span class="se">\b</span>uild
</span></span><span class="line"><span class="cl">REM     compiler cpp-exe by cmake-clang
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">REM ----------------- prepare <span class="nb">dirs</span> ---------------
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">SET <span class="nv">DIR_base</span><span class="o">=</span>%~dp0
</span></span><span class="line"><span class="cl">SET <span class="nv">DIR_out</span><span class="o">=</span>%~dp0<span class="se">\b</span>uild<span class="se">\p</span>ublish
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">SET <span class="nv">DIR_src_shaders</span><span class="o">=</span>%~dp0<span class="se">\s</span>haders
</span></span><span class="line"><span class="cl">SET <span class="nv">DIR_src_jsons</span><span class="o">=</span>%~dp0<span class="se">\j</span>sons
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">SET <span class="nv">DIR_dst_shaders</span><span class="o">=</span>%~dp0<span class="se">\b</span>uild<span class="se">\p</span>ublish<span class="se">\s</span>haders
</span></span><span class="line"><span class="cl">SET <span class="nv">DIR_dst_jsons</span><span class="o">=</span>%~dp0<span class="se">\b</span>uild<span class="se">\p</span>ublish<span class="se">\j</span>sons
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">mkdir %DIR_out%
</span></span><span class="line"><span class="cl">mkdir %DIR_dst_shaders%
</span></span><span class="line"><span class="cl">mkdir %DIR_dst_jsons%
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">xcopy /E /V /F /K /Y %DIR_src_shaders% %DIR_dst_shaders%
</span></span><span class="line"><span class="cl">xcopy /E /V /F /K /Y %DIR_src_jsons% %DIR_dst_jsons%
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="使用clang构建">使用clang构建</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1"># Ubuntu supports multiple versions of clang to be installed at the same time.</span>
</span></span><span class="line"><span class="cl"><span class="c1"># The tests need to determine the clang binary before calling cmake</span>
</span></span><span class="line"><span class="cl"><span class="nv">clang_bin</span><span class="o">=</span><span class="sb">`</span>which clang<span class="sb">`</span>
</span></span><span class="line"><span class="cl"><span class="nv">clang_xx_bin</span><span class="o">=</span><span class="sb">`</span>which clang++<span class="sb">`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -z <span class="nv">$clang_bin</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nv">clang_ver</span><span class="o">=</span><span class="sb">`</span>dpkg --get-selections <span class="p">|</span> grep clang <span class="p">|</span> grep -v -m1 libclang <span class="p">|</span> cut -f1 <span class="p">|</span> cut -d <span class="s1">&#39;-&#39;</span> -f2<span class="sb">`</span>
</span></span><span class="line"><span class="cl">    <span class="nv">clang_bin</span><span class="o">=</span><span class="s2">&#34;clang-</span><span class="nv">$clang_ver</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">clang_xx_bin</span><span class="o">=</span><span class="s2">&#34;clang++-</span><span class="nv">$clang_ver</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Will use clang [</span><span class="nv">$clang_bin</span><span class="s2">] and clang++ [</span><span class="nv">$clang_xx_bin</span><span class="s2">]&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">mkdir -p build.clang <span class="o">&amp;&amp;</span> <span class="nb">cd</span> build.clang <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    cmake .. -DCMAKE_C_COMPILER<span class="o">=</span><span class="nv">$clang_bin</span> -DCMAKE_CXX_COMPILER<span class="o">=</span><span class="nv">$clang_xx_bin</span> <span class="o">&amp;&amp;</span> make -j -l <span class="m">13</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="sysconfig跨平台宏">sysconfig跨平台宏</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// sysconfig/Sysconfig.h.in
</span></span></span><span class="line"><span class="cl"><span class="c1">// 注释行 格式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#ifndef TPR_SYS_CONFIG_TPR_H_
</span></span></span><span class="line"><span class="cl"><span class="cp">#define TPR_SYS_CONFIG_TPR_H_
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">//-- 获得 项目版本号，设置为 宏，以便 源码 中使用。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define VERSION_MAJOR @VERSION_MAJOR@
</span></span></span><span class="line"><span class="cl"><span class="cp">#define VERSION_MINOR @VERSION_MINOR@
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">//-- SWITCH_1 是个 option，需要 cmake 动态生成
</span></span></span><span class="line"><span class="cl"><span class="c1">// 示范如何创建一个 cmake 自定义变量
</span></span></span><span class="line"><span class="cl"><span class="c1">// 最终可以传递到 编译后的 程序体内
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#cmakedefine SWITCH_1
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">//-- 标明自己所处 OS
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#cmakedefine  TPR_OS_UNIX_
</span></span></span><span class="line"><span class="cl"><span class="cp">#cmakedefine  TPR_OS_MACOSX_
</span></span></span><span class="line"><span class="cl"><span class="cp">#cmakedefine  TPR_OS_LINUX_
</span></span></span><span class="line"><span class="cl"><span class="cp">#cmakedefine  TPR_OS_WIN32_
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//-- CMAKE_SYSTEM_NAME 表示 当前系统名，比如 Linux，Darwin
</span></span></span><span class="line"><span class="cl"><span class="c1">//-- 使用 @...@ 提取后，再用 &#34;...&#34; 将其设置为 字符串宏
</span></span></span><span class="line"><span class="cl"><span class="c1">//-- 以便 源码 中使用。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define SYSTEM_NAME &#34;@CMAKE_SYSTEM_NAME@&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#endif
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
    <title>透视投影</title>
    <link>http://graficc.github.io/posts/%E9%80%8F%E8%A7%86%E6%8A%95%E5%BD%B1/</link>
    <pubDate>Sun, 31 Oct 2021 13:26:47 &#43;0000</pubDate><author>1494255412@mail.dlut.edu.cn (Horel)</author><guid>http://graficc.github.io/posts/%E9%80%8F%E8%A7%86%E6%8A%95%E5%BD%B1/</guid>
    <description><![CDATA[<h1 id="对透视投影的深入思考">对透视投影的深入思考</h1>
<p>投影变换是整个渲染管线里，设计得最复杂的，也最巧妙的一次变换。</p>
<h1 id="前因">前因</h1>
<p>在GAMES101中，我只是大概了解了透视投影矩阵所做出的变换，将视椎体中的点全部映射到近平面上，再将近平面缩放成规则观察体(CVV空间)。</p>
<p>而在tinyrenderer中，我见到了不一样的透视投影矩阵。</p>
<p>关于透视投影的插值矫正，tinyrenderer直接忽略了这点，GAMES101中也没有做更详细的讲解，以至于我在看到透视除法等一系列操作时摸不到头脑。</p>
<p>于是，我去开始查找资料，为什么要做透视投影的插值矫正？但网上得到的答案大多都很简短、类似。类似于：重心坐标插值要在线性空间中插值，世界空间、观察空间中的坐标都是线性的，而经过透视投影变换后，是非线性的。于是以屏幕坐标插值出的结果是畸形的，当线性坐标下(例如观察坐标)的插值结果才是正确的。</p>
<p>这番解释虽然大概说明了要做透视插值矫正的必要性，但距离实际应用还是一头雾水。我到底该怎么从屏幕坐标这个非线性空间，插值得到线性空间坐标？透视投影变换的步骤究竟是什么？透视除法除以的w分量又究竟是什么，为什么要这么做？</p>
<p>于是，我展开了深入的理解。</p>
<h1 id="理解前的统一定义">理解前的统一定义</h1>
<p>首先，为了统一坐标系、矩阵等问题，我会从以下方式思考：</p>
<ul>
<li>向量默认为列向量</li>
<li>矩阵默认为列主序</li>
<li>变换默认为矩阵左乘</li>
<li>坐标系默认为右手系</li>
<li>摄像机默认处于原点，lookat方向-z，向上方向+y</li>
</ul>
<h1 id="投影变换的目的">投影变换的目的</h1>
<p>坐标转换到观察空间后，由于直接使用摄像机的平截头体进行裁剪比较复杂（平截头体的边界方程求交困难），所以需要将其转化到裁剪空间（<strong>Clip空间</strong> ）。</p>
<p><strong>从观察空间到裁剪空间的变换</strong>叫做<strong>投影变换</strong>。Project</p>
<p>裁剪空间变换的思路是，对视椎体进行缩放，使远裁剪面缩放至近裁剪面大小，然后将这个长方体缩放至标准立方体移动到原点，使坐标的w分量表示裁剪范围，此时，只需要简单的比较x,y,z和w分量的大小即可裁剪图元。</p>
<p>虽然叫做投影变换，但是投影变换并没有进行真正的投影。</p>
<p>这一篇主要讲透视投影</p>
<h1 id="透视投影变换步骤">透视投影变换步骤</h1>
<ol>
<li>从视椎体内一点投影到近裁剪面</li>
<li>由近裁剪面缩放至规则观察体(CVV空间)，得到clip坐标(此时clip坐标还没有除以w变成3D坐标，仍是齐次坐标)</li>
</ol>
<p>对相机空间中的顶点，如果在视锥体中，则变换后就在CVV中。如果在视锥体外，变换后就在CVV外。CVV本身的规则性对于多边形的裁剪很有利。</p>
<h1 id="透视投影简易模型理解">透视投影简易模型理解</h1>
<p>首先，我们明确我们的需求：将观察空间中视椎体中的坐标点 (x, y, z, 1)，通过透视投影，转化到近平面上的点 (x&rsquo;, y&rsquo;, z&rsquo;, 1) 中去。</p>
<p></p>
<p>那么我们可以很简单的得到 z&rsquo; = Near，那么由于近平面值Near是固定的，先不妨假设为1，则</p>
<p>由相似三角形可得：</p>
<ul>
<li>z&rsquo; = 1 	 （z&rsquo; = Near）</li>
<li>x&rsquo; = x/z   （x&rsquo; = x * Near / z）</li>
<li>y&rsquo; = y/z   （y&rsquo; = y * Near / z）</li>
<li>w = 1</li>
</ul>
<p>那么就可以推出tinyrenderer中的透视矩阵：</p>
<p></p>
<blockquote>
<p>因采用右手系，这里红色的1应该是-1</p>
<p>注意到M的最后一行不是(0 0 0 1)而是(0 0 -1 0)，因此可以看出透视变换不是一种仿射变换，它是非线性的。</p>
</blockquote>
<p>经过这个矩阵变换，就可以得到(x&rsquo; = x, y&rsquo; = y, z&rsquo; = z, w&rsquo; = z)，经过齐次除法，xy映射到x&rsquo; = x/z，y&rsquo; = y/z，z&rsquo; = 1。这正是我们想要的变换。</p>
<p>我们将透视投影变换的系数储存在了w分量里，只要进行透视除法，就是非线性的(x&rsquo;, y&rsquo;, z&rsquo;)坐标，而不考虑w分量，(x, y, z)仍是线性可插值的。</p>
<h1 id="数学推导">数学推导</h1>
<p></p>
<p>推荐看这篇文章：<a href="https://blog.csdn.net/n5/article/details/100148540" target="_blank" rel="noopener noreffer">图形学基础之透视校正插值</a></p>
<p>经过推导，我们发现：</p>
<p>当我们从视角空间到透视投影到屏幕空间后，我们的线性变换并不是x, y, z的线性变换，而是x, y, <strong>1/z</strong>的线性变换。因此在屏幕空间上的插值需要做透视校正，否则会出现不正确的情况。</p>
<p>为什么是<strong>1/z</strong>的线性变换呢，在透视投影中，我们的视椎体是一个不规则立方体，将点(x, y, z)中的x, y映射到屏幕(近平面)上时会根据其z的值进行压缩，其公式是：</p>
<ul>
<li>x&rsquo; = Near/z * x</li>
<li>y&rsquo; = Near/z * y</li>
</ul>
<p>可以发现x&rsquo;, y&rsquo;和x, y的关系是1/z的关系。</p>
<p>在齐次坐标中  ，因此我们将z保存在w的位置，将x, y, z在透视投影下的线性变换都<strong>乘以z</strong>。这样 </p>
<p>就是关于x, y, z的线性变换。</p>
<p>因此所谓的透视除法，就是在透视投影后还原x, y, z真实的屏幕空间值的过程。</p>
<h1 id="真实模型理解">真实模型理解</h1>
<p>下面来看看网上最常见的透视矩阵书写形式：</p>
<p></p>
<p>其实这么写反而妨碍了我们的直观理解，由Aspect、Fov与w（width）、h（height）、N（Near）、F（Far）的关系，我们<strong>应当</strong>写成如下形式：</p>
<p></p>
<p>发现了吗，和透视矩阵之母Pure Perspective Projection的区别，第一列第一行的1变为了N*（2/w）这么一个缩放值。</p>
<p>2/w很好理解，是将近平面的宽缩放到长度2；</p>
<p>乘上N ，是因为考虑到齐次除法xyz分量要除以w分量，矩阵转化后的w分量等于转化前的z分量相反数。</p>
<p>故x&rsquo;/w&rsquo;= x/z, y&rsquo;/w&rsquo; = y/z,是我们要的投影到近平面为1的值，这个值乘上N就相当于映射到了近平面，即true x’ =（N/z）*（2/w）。 相应的，mat11的值1变化为2N/h。</p>
<h1 id="总结">总结</h1>
<p>关于透视投影的矫正，通过将原始的z值存储在w分量中。</p>
<p>透视校正插值使用<strong>线性的深度值</strong>和<strong>非线性空间下的插值系数s</strong>来计算出线性空间下的插值系数t，并用t来对顶点属性进行插值。</p>
<p>最后得到的(x&rsquo;, y&rsquo;, z&rsquo;, w)中，x‘、y’已经是xy乘过Near了，再除以z不就是屏幕空间吗。</p>
<ul>
<li>x&rsquo; = x * Near / z</li>
<li>y&rsquo; = y * Near / z</li>
<li>z = Near</li>
<li>w = 1</li>
</ul>
]]></description>
</item>
<item>
    <title>牛顿迭代法求平方根</title>
    <link>http://graficc.github.io/posts/%E7%89%9B%E9%A1%BF%E8%BF%AD%E4%BB%A3%E6%B3%95%E6%B1%82%E5%B9%B3%E6%96%B9%E6%A0%B9/</link>
    <pubDate>Wed, 30 Jun 2021 22:39:00 &#43;0000</pubDate><author>1494255412@mail.dlut.edu.cn (Horel)</author><guid>http://graficc.github.io/posts/%E7%89%9B%E9%A1%BF%E8%BF%AD%E4%BB%A3%E6%B3%95%E6%B1%82%E5%B9%B3%E6%96%B9%E6%A0%B9/</guid>
    <description><![CDATA[<h1 id="牛顿迭代法求平方根">牛顿迭代法求平方根</h1>
<p>牛顿迭代法求平方根，这种方法可以很有效地求出根号a的近似值：</p>
<p>首先随便猜一个近似值x，然后不断令x等于x和a/x的平均数，迭代个六七次后x的值就已经相当精确了。</p>
<blockquote>
<p>例如，我想求根号2等于多少。假如我猜测的结果为4，虽然错的离谱，但你可以看到使用牛顿迭代法后这个值很快就趋近于根号2了：</p>
</blockquote>
<p>;;;info</p>
<p>(    4 + 2/  4   ) / 2 = 2.25
(  2.25 + 2/  2.25 ) / 2 = 1.56944..
( 1.56944..+ 2/1.56944..) / 2 = 1.42189..
( 1.42189..+ 2/1.42189..) / 2 = 1.41423..
….</p>
<p>;;;</p>
<p></p>
<p>原理其实很简单，我们仅仅是不断用(x,f(x))的切线来逼近方程x^2-a=0的根。</p>
<p>根号a实际上就是x^2-a=0的一个正实根，这个函数的导数是2x。</p>
<p>也就是说，函数上任一点(x,f(x))处的切线斜率是2x。那么，x-f(x)/(2x)就是一个比x更接近的近似值。</p>
<p>代入f(x)=x^2-a得到x-(x^2-a)/(2x)，也就是(x+a/x)/2。</p>
<blockquote>
<p>java代码实现如下</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">double</span> <span class="nf">sqrt</span><span class="o">(</span><span class="kt">double</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="o">(</span><span class="n">c</span> <span class="o">&lt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Double</span><span class="o">.</span><span class="na">NaN</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="kt">double</span> <span class="n">err</span> <span class="o">=</span> <span class="n">1e</span><span class="o">-</span><span class="n">15</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">double</span> <span class="n">x</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 循环条件为上一次值和这次值的差，小于一个阈值(误差范围)退出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">c</span><span class="o">/</span><span class="n">x</span><span class="o">)</span> <span class="o">&gt;</span> <span class="n">err</span> <span class="o">*</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">        <span class="n">x</span> <span class="o">=</span> <span class="o">(</span><span class="n">c</span><span class="o">/</span><span class="n">x</span> <span class="o">+</span> <span class="n">x</span><span class="o">)</span> <span class="o">/</span> <span class="n">2</span><span class="o">.</span><span class="na">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>参考自：http://www.matrix67.com/blog/archives/361</p>
]]></description>
</item>
<item>
    <title>动态分区分配算法</title>
    <link>http://graficc.github.io/posts/%E5%8A%A8%E6%80%81%E5%88%86%E5%8C%BA%E5%88%86%E9%85%8D%E7%AE%97%E6%B3%95/</link>
    <pubDate>Sat, 12 Jun 2021 20:21:58 &#43;0000</pubDate><author>1494255412@mail.dlut.edu.cn (Horel)</author><guid>http://graficc.github.io/posts/%E5%8A%A8%E6%80%81%E5%88%86%E5%8C%BA%E5%88%86%E9%85%8D%E7%AE%97%E6%B3%95/</guid>
    <description><![CDATA[<ul>
<li>首次适应算法FF</li>
<li>循环首次适应算法NF</li>
<li>最佳适应算法BF</li>
<li>最差适应算法WF</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span><span class="lnt">211
</span><span class="lnt">212
</span><span class="lnt">213
</span><span class="lnt">214
</span><span class="lnt">215
</span><span class="lnt">216
</span><span class="lnt">217
</span><span class="lnt">218
</span><span class="lnt">219
</span><span class="lnt">220
</span><span class="lnt">221
</span><span class="lnt">222
</span><span class="lnt">223
</span><span class="lnt">224
</span><span class="lnt">225
</span><span class="lnt">226
</span><span class="lnt">227
</span><span class="lnt">228
</span><span class="lnt">229
</span><span class="lnt">230
</span><span class="lnt">231
</span><span class="lnt">232
</span><span class="lnt">233
</span><span class="lnt">234
</span><span class="lnt">235
</span><span class="lnt">236
</span><span class="lnt">237
</span><span class="lnt">238
</span><span class="lnt">239
</span><span class="lnt">240
</span><span class="lnt">241
</span><span class="lnt">242
</span><span class="lnt">243
</span><span class="lnt">244
</span><span class="lnt">245
</span><span class="lnt">246
</span><span class="lnt">247
</span><span class="lnt">248
</span><span class="lnt">249
</span><span class="lnt">250
</span><span class="lnt">251
</span><span class="lnt">252
</span><span class="lnt">253
</span><span class="lnt">254
</span><span class="lnt">255
</span><span class="lnt">256
</span><span class="lnt">257
</span><span class="lnt">258
</span><span class="lnt">259
</span><span class="lnt">260
</span><span class="lnt">261
</span><span class="lnt">262
</span><span class="lnt">263
</span><span class="lnt">264
</span><span class="lnt">265
</span><span class="lnt">266
</span><span class="lnt">267
</span><span class="lnt">268
</span><span class="lnt">269
</span><span class="lnt">270
</span><span class="lnt">271
</span><span class="lnt">272
</span><span class="lnt">273
</span><span class="lnt">274
</span><span class="lnt">275
</span><span class="lnt">276
</span><span class="lnt">277
</span><span class="lnt">278
</span><span class="lnt">279
</span><span class="lnt">280
</span><span class="lnt">281
</span><span class="lnt">282
</span><span class="lnt">283
</span><span class="lnt">284
</span><span class="lnt">285
</span><span class="lnt">286
</span><span class="lnt">287
</span><span class="lnt">288
</span><span class="lnt">289
</span><span class="lnt">290
</span><span class="lnt">291
</span><span class="lnt">292
</span><span class="lnt">293
</span><span class="lnt">294
</span><span class="lnt">295
</span><span class="lnt">296
</span><span class="lnt">297
</span><span class="lnt">298
</span><span class="lnt">299
</span><span class="lnt">300
</span><span class="lnt">301
</span><span class="lnt">302
</span><span class="lnt">303
</span><span class="lnt">304
</span><span class="lnt">305
</span><span class="lnt">306
</span><span class="lnt">307
</span><span class="lnt">308
</span><span class="lnt">309
</span><span class="lnt">310
</span><span class="lnt">311
</span><span class="lnt">312
</span><span class="lnt">313
</span><span class="lnt">314
</span><span class="lnt">315
</span><span class="lnt">316
</span><span class="lnt">317
</span><span class="lnt">318
</span><span class="lnt">319
</span><span class="lnt">320
</span><span class="lnt">321
</span><span class="lnt">322
</span><span class="lnt">323
</span><span class="lnt">324
</span><span class="lnt">325
</span><span class="lnt">326
</span><span class="lnt">327
</span><span class="lnt">328
</span><span class="lnt">329
</span><span class="lnt">330
</span><span class="lnt">331
</span><span class="lnt">332
</span><span class="lnt">333
</span><span class="lnt">334
</span><span class="lnt">335
</span><span class="lnt">336
</span><span class="lnt">337
</span><span class="lnt">338
</span><span class="lnt">339
</span><span class="lnt">340
</span><span class="lnt">341
</span><span class="lnt">342
</span><span class="lnt">343
</span><span class="lnt">344
</span><span class="lnt">345
</span><span class="lnt">346
</span><span class="lnt">347
</span><span class="lnt">348
</span><span class="lnt">349
</span><span class="lnt">350
</span><span class="lnt">351
</span><span class="lnt">352
</span><span class="lnt">353
</span><span class="lnt">354
</span><span class="lnt">355
</span><span class="lnt">356
</span><span class="lnt">357
</span><span class="lnt">358
</span><span class="lnt">359
</span><span class="lnt">360
</span><span class="lnt">361
</span><span class="lnt">362
</span><span class="lnt">363
</span><span class="lnt">364
</span><span class="lnt">365
</span><span class="lnt">366
</span><span class="lnt">367
</span><span class="lnt">368
</span><span class="lnt">369
</span><span class="lnt">370
</span><span class="lnt">371
</span><span class="lnt">372
</span><span class="lnt">373
</span><span class="lnt">374
</span><span class="lnt">375
</span><span class="lnt">376
</span><span class="lnt">377
</span><span class="lnt">378
</span><span class="lnt">379
</span><span class="lnt">380
</span><span class="lnt">381
</span><span class="lnt">382
</span><span class="lnt">383
</span><span class="lnt">384
</span><span class="lnt">385
</span><span class="lnt">386
</span><span class="lnt">387
</span><span class="lnt">388
</span><span class="lnt">389
</span><span class="lnt">390
</span><span class="lnt">391
</span><span class="lnt">392
</span><span class="lnt">393
</span><span class="lnt">394
</span><span class="lnt">395
</span><span class="lnt">396
</span><span class="lnt">397
</span><span class="lnt">398
</span><span class="lnt">399
</span><span class="lnt">400
</span><span class="lnt">401
</span><span class="lnt">402
</span><span class="lnt">403
</span><span class="lnt">404
</span><span class="lnt">405
</span><span class="lnt">406
</span><span class="lnt">407
</span><span class="lnt">408
</span><span class="lnt">409
</span><span class="lnt">410
</span><span class="lnt">411
</span><span class="lnt">412
</span><span class="lnt">413
</span><span class="lnt">414
</span><span class="lnt">415
</span><span class="lnt">416
</span><span class="lnt">417
</span><span class="lnt">418
</span><span class="lnt">419
</span><span class="lnt">420
</span><span class="lnt">421
</span><span class="lnt">422
</span><span class="lnt">423
</span><span class="lnt">424
</span><span class="lnt">425
</span><span class="lnt">426
</span><span class="lnt">427
</span><span class="lnt">428
</span><span class="lnt">429
</span><span class="lnt">430
</span><span class="lnt">431
</span><span class="lnt">432
</span><span class="lnt">433
</span><span class="lnt">434
</span><span class="lnt">435
</span><span class="lnt">436
</span><span class="lnt">437
</span><span class="lnt">438
</span><span class="lnt">439
</span><span class="lnt">440
</span><span class="lnt">441
</span><span class="lnt">442
</span><span class="lnt">443
</span><span class="lnt">444
</span><span class="lnt">445
</span><span class="lnt">446
</span><span class="lnt">447
</span><span class="lnt">448
</span><span class="lnt">449
</span><span class="lnt">450
</span><span class="lnt">451
</span><span class="lnt">452
</span><span class="lnt">453
</span><span class="lnt">454
</span><span class="lnt">455
</span><span class="lnt">456
</span><span class="lnt">457
</span><span class="lnt">458
</span><span class="lnt">459
</span><span class="lnt">460
</span><span class="lnt">461
</span><span class="lnt">462
</span><span class="lnt">463
</span><span class="lnt">464
</span><span class="lnt">465
</span><span class="lnt">466
</span><span class="lnt">467
</span><span class="lnt">468
</span><span class="lnt">469
</span><span class="lnt">470
</span><span class="lnt">471
</span><span class="lnt">472
</span><span class="lnt">473
</span><span class="lnt">474
</span><span class="lnt">475
</span><span class="lnt">476
</span><span class="lnt">477
</span><span class="lnt">478
</span><span class="lnt">479
</span><span class="lnt">480
</span><span class="lnt">481
</span><span class="lnt">482
</span><span class="lnt">483
</span><span class="lnt">484
</span><span class="lnt">485
</span><span class="lnt">486
</span><span class="lnt">487
</span><span class="lnt">488
</span><span class="lnt">489
</span><span class="lnt">490
</span><span class="lnt">491
</span><span class="lnt">492
</span><span class="lnt">493
</span><span class="lnt">494
</span><span class="lnt">495
</span><span class="lnt">496
</span><span class="lnt">497
</span><span class="lnt">498
</span><span class="lnt">499
</span><span class="lnt">500
</span><span class="lnt">501
</span><span class="lnt">502
</span><span class="lnt">503
</span><span class="lnt">504
</span><span class="lnt">505
</span><span class="lnt">506
</span><span class="lnt">507
</span><span class="lnt">508
</span><span class="lnt">509
</span><span class="lnt">510
</span><span class="lnt">511
</span><span class="lnt">512
</span><span class="lnt">513
</span><span class="lnt">514
</span><span class="lnt">515
</span><span class="lnt">516
</span><span class="lnt">517
</span><span class="lnt">518
</span><span class="lnt">519
</span><span class="lnt">520
</span><span class="lnt">521
</span><span class="lnt">522
</span><span class="lnt">523
</span><span class="lnt">524
</span><span class="lnt">525
</span><span class="lnt">526
</span><span class="lnt">527
</span><span class="lnt">528
</span><span class="lnt">529
</span><span class="lnt">530
</span><span class="lnt">531
</span><span class="lnt">532
</span><span class="lnt">533
</span><span class="lnt">534
</span><span class="lnt">535
</span><span class="lnt">536
</span><span class="lnt">537
</span><span class="lnt">538
</span><span class="lnt">539
</span><span class="lnt">540
</span><span class="lnt">541
</span><span class="lnt">542
</span><span class="lnt">543
</span><span class="lnt">544
</span><span class="lnt">545
</span><span class="lnt">546
</span><span class="lnt">547
</span><span class="lnt">548
</span><span class="lnt">549
</span><span class="lnt">550
</span><span class="lnt">551
</span><span class="lnt">552
</span><span class="lnt">553
</span><span class="lnt">554
</span><span class="lnt">555
</span><span class="lnt">556
</span><span class="lnt">557
</span><span class="lnt">558
</span><span class="lnt">559
</span><span class="lnt">560
</span><span class="lnt">561
</span><span class="lnt">562
</span><span class="lnt">563
</span><span class="lnt">564
</span><span class="lnt">565
</span><span class="lnt">566
</span><span class="lnt">567
</span><span class="lnt">568
</span><span class="lnt">569
</span><span class="lnt">570
</span><span class="lnt">571
</span><span class="lnt">572
</span><span class="lnt">573
</span><span class="lnt">574
</span><span class="lnt">575
</span><span class="lnt">576
</span><span class="lnt">577
</span><span class="lnt">578
</span><span class="lnt">579
</span><span class="lnt">580
</span><span class="lnt">581
</span><span class="lnt">582
</span><span class="lnt">583
</span><span class="lnt">584
</span><span class="lnt">585
</span><span class="lnt">586
</span><span class="lnt">587
</span><span class="lnt">588
</span><span class="lnt">589
</span><span class="lnt">590
</span><span class="lnt">591
</span><span class="lnt">592
</span><span class="lnt">593
</span><span class="lnt">594
</span><span class="lnt">595
</span><span class="lnt">596
</span><span class="lnt">597
</span><span class="lnt">598
</span><span class="lnt">599
</span><span class="lnt">600
</span><span class="lnt">601
</span><span class="lnt">602
</span><span class="lnt">603
</span><span class="lnt">604
</span><span class="lnt">605
</span><span class="lnt">606
</span><span class="lnt">607
</span><span class="lnt">608
</span><span class="lnt">609
</span><span class="lnt">610
</span><span class="lnt">611
</span><span class="lnt">612
</span><span class="lnt">613
</span><span class="lnt">614
</span><span class="lnt">615
</span><span class="lnt">616
</span><span class="lnt">617
</span><span class="lnt">618
</span><span class="lnt">619
</span><span class="lnt">620
</span><span class="lnt">621
</span><span class="lnt">622
</span><span class="lnt">623
</span><span class="lnt">624
</span><span class="lnt">625
</span><span class="lnt">626
</span><span class="lnt">627
</span><span class="lnt">628
</span><span class="lnt">629
</span><span class="lnt">630
</span><span class="lnt">631
</span><span class="lnt">632
</span><span class="lnt">633
</span><span class="lnt">634
</span><span class="lnt">635
</span><span class="lnt">636
</span><span class="lnt">637
</span><span class="lnt">638
</span><span class="lnt">639
</span><span class="lnt">640
</span><span class="lnt">641
</span><span class="lnt">642
</span><span class="lnt">643
</span><span class="lnt">644
</span><span class="lnt">645
</span><span class="lnt">646
</span><span class="lnt">647
</span><span class="lnt">648
</span><span class="lnt">649
</span><span class="lnt">650
</span><span class="lnt">651
</span><span class="lnt">652
</span><span class="lnt">653
</span><span class="lnt">654
</span><span class="lnt">655
</span><span class="lnt">656
</span><span class="lnt">657
</span><span class="lnt">658
</span><span class="lnt">659
</span><span class="lnt">660
</span><span class="lnt">661
</span><span class="lnt">662
</span><span class="lnt">663
</span><span class="lnt">664
</span><span class="lnt">665
</span><span class="lnt">666
</span><span class="lnt">667
</span><span class="lnt">668
</span><span class="lnt">669
</span><span class="lnt">670
</span><span class="lnt">671
</span><span class="lnt">672
</span><span class="lnt">673
</span><span class="lnt">674
</span><span class="lnt">675
</span><span class="lnt">676
</span><span class="lnt">677
</span><span class="lnt">678
</span><span class="lnt">679
</span><span class="lnt">680
</span><span class="lnt">681
</span><span class="lnt">682
</span><span class="lnt">683
</span><span class="lnt">684
</span><span class="lnt">685
</span><span class="lnt">686
</span><span class="lnt">687
</span><span class="lnt">688
</span><span class="lnt">689
</span><span class="lnt">690
</span><span class="lnt">691
</span><span class="lnt">692
</span><span class="lnt">693
</span><span class="lnt">694
</span><span class="lnt">695
</span><span class="lnt">696
</span><span class="lnt">697
</span><span class="lnt">698
</span><span class="lnt">699
</span><span class="lnt">700
</span><span class="lnt">701
</span><span class="lnt">702
</span><span class="lnt">703
</span><span class="lnt">704
</span><span class="lnt">705
</span><span class="lnt">706
</span><span class="lnt">707
</span><span class="lnt">708
</span><span class="lnt">709
</span><span class="lnt">710
</span><span class="lnt">711
</span><span class="lnt">712
</span><span class="lnt">713
</span><span class="lnt">714
</span><span class="lnt">715
</span><span class="lnt">716
</span><span class="lnt">717
</span><span class="lnt">718
</span><span class="lnt">719
</span><span class="lnt">720
</span><span class="lnt">721
</span><span class="lnt">722
</span><span class="lnt">723
</span><span class="lnt">724
</span><span class="lnt">725
</span><span class="lnt">726
</span><span class="lnt">727
</span><span class="lnt">728
</span><span class="lnt">729
</span><span class="lnt">730
</span><span class="lnt">731
</span><span class="lnt">732
</span><span class="lnt">733
</span><span class="lnt">734
</span><span class="lnt">735
</span><span class="lnt">736
</span><span class="lnt">737
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;malloc.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define PROCESS_NAME_LEN 32   </span><span class="c1">//进程名字长度
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define MIN_SLICE 10          </span><span class="c1">//最小碎片大小
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define DEFAULT_MEM_SIZE 1024 </span><span class="c1">// 默认的内存大小
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define DEFAULT_MEM_START 0   </span><span class="c1">//起始地址
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define MA_FF 1 </span><span class="c1">//首次适应算法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define MA_BF 2 </span><span class="c1">//最佳适应算法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define MA_WF 3 </span><span class="c1">//最坏适应算法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define MA_NF 4 </span><span class="c1">//临近适应算法（循环首次适应算法）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">//空闲分区的结构体
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">typedef</span> <span class="k">struct</span> <span class="nc">free_block_type</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">start_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="nc">free_block_type</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">free_block_type</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="cm">/*指向内存中空闲块链表的首指针*/</span>
</span></span><span class="line"><span class="cl"><span class="n">free_block_type</span> <span class="o">*</span><span class="n">free_block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//已分配分区的结构体
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">typedef</span> <span class="k">struct</span> <span class="nc">allocated_block</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">pid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">start_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">process_name</span><span class="p">[</span><span class="n">PROCESS_NAME_LEN</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="nc">allocated_block</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">allocated_block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1">//进程分配内存块链表的首指针
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">struct</span> <span class="nc">allocated_block</span> <span class="o">*</span><span class="n">allocated_block_head</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">mem_size</span> <span class="o">=</span> <span class="n">DEFAULT_MEM_SIZE</span><span class="p">;</span>    <span class="c1">// 内存大小
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="n">ma_algorithm</span> <span class="o">=</span> <span class="n">MA_FF</span><span class="p">;</span>   <span class="c1">// 动态分区分配算法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">static</span> <span class="kt">int</span> <span class="n">pid</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>     <span class="c1">//  进程号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="n">flag</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>   <span class="c1">// 判断内存是否被修改标志
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">//函数声明
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">display_menu</span><span class="p">();</span>    <span class="c1">// 显示主菜单
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">set_mem_size</span><span class="p">();</span>     <span class="c1">// 设置内存大小
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">set_algorithm</span><span class="p">();</span>   <span class="c1">// 选择当前算法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">rearrange</span><span class="p">(</span><span class="kt">int</span> <span class="n">algorithm</span><span class="p">);</span>  <span class="c1">// 为每一个进程分配完内存以后重新按已选择的算法再次排序
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">new_process</span><span class="p">();</span>      <span class="c1">// 创建一个新的进程
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">allocate_mem</span><span class="p">(</span><span class="k">struct</span> <span class="nc">allocated_block</span> <span class="o">*</span><span class="n">ab</span><span class="p">);</span>   <span class="c1">// 内存分配
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">kill_process</span><span class="p">();</span>    <span class="c1">// 杀死进程
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">free_mem</span><span class="p">(</span><span class="k">struct</span> <span class="nc">allocated_block</span> <span class="o">*</span><span class="n">ab</span><span class="p">);</span>       <span class="c1">// 释放杀死进程的内存块
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">dispose</span><span class="p">(</span><span class="k">struct</span> <span class="nc">allocated_block</span> <span class="o">*</span><span class="n">free_ab</span><span class="p">);</span>   <span class="c1">// 销毁杀死进程的结点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">display_mem_usage</span><span class="p">();</span>    <span class="c1">// 显示内存使用情况
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">allocated_block</span> <span class="o">*</span><span class="nf">find_process</span><span class="p">(</span><span class="kt">int</span> <span class="n">pid</span><span class="p">);</span>         <span class="c1">// 找到要杀死的进程的标号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">rearrange_FF</span><span class="p">();</span>    <span class="c1">// 首次适应算法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">rearrange_BF</span><span class="p">();</span>    <span class="c1">// 最佳适应算法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">rearrange_WF</span><span class="p">();</span>    <span class="c1">// 最坏适应算法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">rearrange_NF</span><span class="p">();</span>    <span class="c1">// 临近适应算法（循环首次适应算法）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">//初始化空闲分区
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">free_block_type</span> <span class="o">*</span><span class="nf">init_free_block</span><span class="p">(</span><span class="kt">int</span> <span class="n">mem_size</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">free_block_type</span> <span class="o">*</span><span class="n">fb</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">fb</span> <span class="o">=</span> <span class="p">(</span><span class="n">free_block_type</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">free_block_type</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">fb</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;No mem</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">fb</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">mem_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">fb</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">=</span> <span class="n">DEFAULT_MEM_START</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">fb</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fb</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//显示主菜单
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">display_menu</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;1 - Set memory size (default=%d)</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">DEFAULT_MEM_SIZE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;2 - Select memory allocation algorithm</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;3 - New process </span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;4 - Terminate a process </span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;5 - Display memory usage </span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;0 - Exit</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*设置内存大小*/</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">set_mem_size</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">flag</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/*flag标志防止内存被再次设置*/</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Cannot set memory size again</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Total memory size =&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">size</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">mem_size</span> <span class="o">=</span> <span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">free_block</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">mem_size</span><span class="p">;</span> <span class="cm">/*设置初始大小为 1024*/</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cm">/*选择当前算法*/</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">set_algorithm</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">algorithm</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\t</span><span class="s">1 - First Fit</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\t</span><span class="s">2 - Best Fit </span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\t</span><span class="s">3 - Worst Fit </span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\t</span><span class="s">4 - Next Fit</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Please input your choice : &#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">algorithm</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">algorithm</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">algorithm</span> <span class="o">&lt;=</span> <span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">ma_algorithm</span> <span class="o">=</span> <span class="n">algorithm</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">rearrange</span><span class="p">(</span><span class="n">ma_algorithm</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*为每一个进程分配完内存以后重新按已选择的算法再次排序*/</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">rearrange</span><span class="p">(</span><span class="kt">int</span> <span class="n">algorithm</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">switch</span> <span class="p">(</span><span class="n">algorithm</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="nl">MA_FF</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">rearrange_FF</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="nl">MA_BF</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">rearrange_BF</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="nl">MA_WF</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">rearrange_WF</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="nl">MA_NF</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">rearrange_NF</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*首次适应算法，按地址的大小由小到大排序*/</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">rearrange_FF</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">free_block_type</span> <span class="o">*</span><span class="n">temp</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">free_block_type</span> <span class="o">*</span><span class="n">head</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">current_min_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">free_block</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">temp</span> <span class="o">=</span> <span class="n">free_block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">current_min_addr</span> <span class="o">=</span> <span class="n">free_block</span><span class="o">-&gt;</span><span class="n">start_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">&lt;</span> <span class="n">current_min_addr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">current_min_addr</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">start_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">p</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">temp</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">free_block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">free_block</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">head</span> <span class="o">=</span> <span class="n">free_block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">p</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">temp</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="p">(</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">current_min_addr</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">start_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">&lt;</span> <span class="n">current_min_addr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">current_min_addr</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">start_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                    <span class="n">p</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">temp</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">temp</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">p</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*最佳适应算法，按内存块的大小由小到大排序*/</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">rearrange_BF</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">free_block_type</span> <span class="o">*</span><span class="n">temp</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">free_block_type</span> <span class="o">*</span><span class="n">head</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">current_min_size</span> <span class="o">=</span> <span class="n">free_block</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">temp</span> <span class="o">=</span> <span class="n">free_block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">&lt;</span> <span class="n">current_min_size</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">current_min_size</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">p</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">temp</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">free_block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">free_block</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">head</span> <span class="o">=</span> <span class="n">free_block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">temp</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">current_min_size</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">&lt;</span> <span class="n">current_min_size</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">current_min_size</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">p</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">temp</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">temp</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">p</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*最坏适应算法，按地址块的大小从大到小排序*/</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">rearrange_WF</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">free_block_type</span> <span class="o">*</span><span class="n">temp</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">free_block_type</span> <span class="o">*</span><span class="n">head</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">current_max_size</span> <span class="o">=</span> <span class="n">free_block</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">temp</span> <span class="o">=</span> <span class="n">free_block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">&gt;</span> <span class="n">current_max_size</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">current_max_size</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">p</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">temp</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">free_block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">free_block</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">head</span> <span class="o">=</span> <span class="n">free_block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">temp</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">current_max_size</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">&gt;</span> <span class="n">current_max_size</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">current_max_size</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">p</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">temp</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">temp</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">p</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 临近适应算法（循环首次适应算法）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">struct</span> <span class="nc">free_block_type</span> <span class="o">*</span><span class="n">NF_tmp</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">rearrange_NF</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    <span class="n">free_block_type</span> <span class="o">*</span><span class="n">temp</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">free_block_type</span> <span class="o">*</span><span class="n">head</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">current_min_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">free_block</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">temp</span> <span class="o">=</span> <span class="n">free_block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">current_min_addr</span> <span class="o">=</span> <span class="n">free_block</span><span class="o">-&gt;</span><span class="n">start_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 找到最小的地址
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">&lt;</span> <span class="n">current_min_addr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">current_min_addr</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">start_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">p</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="c1">// 让最小的地址成为空闲内存链表头
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">temp</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">free_block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">free_block</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">head</span> <span class="o">=</span> <span class="n">free_block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">p</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">temp</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="p">(</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>    <span class="c1">// 从头开始向后遍历，把最小的地址的内存逐次接起来
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">current_min_addr</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">start_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>    <span class="c1">// 找到剩余最小的地址的内存
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">&lt;</span> <span class="n">current_min_addr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">current_min_addr</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">start_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                    <span class="n">p</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="p">{</span>    <span class="c1">// 把找到的最小的接起来
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">temp</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>      <span class="c1">// 接上新的较小的头
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="p">}</span> 
</span></span><span class="line"><span class="cl">            <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>  <span class="c1">// 继续向后遍历
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">temp</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">p</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//创建一个新的进程
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">new_process</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="nc">allocated_block</span> <span class="o">*</span><span class="n">ab</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">ret</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ab</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="nc">allocated_block</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="nc">allocated_block</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ab</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">5</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">ab</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pid</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">sprintf</span><span class="p">(</span><span class="n">ab</span><span class="o">-&gt;</span><span class="n">process_name</span><span class="p">,</span> <span class="s">&#34;PROCESS-%02d&#34;</span><span class="p">,</span> <span class="n">pid</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">ab</span><span class="o">-&gt;</span><span class="n">pid</span> <span class="o">=</span> <span class="n">pid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Memory for %s:&#34;</span><span class="p">,</span> <span class="n">ab</span><span class="o">-&gt;</span><span class="n">process_name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Please input you want to allocate process&#39; size : &#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">size</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">ab</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">ret</span> <span class="o">=</span> <span class="n">allocate_mem</span><span class="p">(</span><span class="n">ab</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">((</span><span class="n">ret</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">allocated_block_head</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">allocated_block_head</span> <span class="o">=</span> <span class="n">ab</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ab</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">allocated_block_head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">allocated_block_head</span> <span class="o">=</span> <span class="n">ab</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Allocation fail</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">pid</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">free</span><span class="p">(</span><span class="n">ab</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// NF专属内存分配
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">allocate_mem_NF</span><span class="p">(</span><span class="k">struct</span> <span class="nc">allocated_block</span> <span class="o">*</span><span class="n">ab</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ab_size</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="nc">free_block_type</span> <span class="o">*</span><span class="n">fbt</span><span class="p">,</span> <span class="o">*</span><span class="n">pre</span><span class="p">,</span> <span class="o">*</span><span class="n">temp</span><span class="p">,</span> <span class="o">*</span><span class="n">work</span><span class="p">,</span> <span class="o">*</span><span class="n">F</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">request_size</span> <span class="o">=</span> <span class="n">ab_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 与上一次位置有关
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">NF_tmp</span> <span class="o">==</span> <span class="n">free_block</span> <span class="o">||</span> <span class="n">NF_tmp</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 从头或者首次分配
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">F</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">NF_tmp</span> <span class="o">=</span> <span class="n">free_block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span>
</span></span><span class="line"><span class="cl">        <span class="n">F</span> <span class="o">=</span> <span class="n">NF_tmp</span><span class="p">;</span>     <span class="c1">// F记录保存上次位置，作为循环判断条件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">fbt</span> <span class="o">=</span> <span class="n">NF_tmp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pre</span> <span class="o">=</span> <span class="n">fbt</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">F</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">fbt</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">fbt</span> <span class="o">=</span> <span class="n">free_block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">fbt</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">&gt;=</span> <span class="n">request_size</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">NF_tmp</span> <span class="o">=</span> <span class="n">fbt</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">fbt</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">-</span> <span class="n">request_size</span> <span class="o">&gt;=</span> <span class="n">MIN_SLICE</span><span class="p">)</span> <span class="p">{</span>    <span class="cm">/*分配后空闲空间足够大，则分割*/</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// mem_size -= request_size;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">-=</span> <span class="n">request_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">ab</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">=</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">start_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">+=</span> <span class="n">request_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">NF_tmp</span> <span class="o">=</span> <span class="n">fbt</span><span class="p">;</span>   <span class="c1">// 重新记录分配位置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="n">fbt</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">-</span> <span class="n">request_size</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">MIN_SLICE</span><span class="p">)</span> <span class="p">{</span>                <span class="cm">/*分割后空闲区成为小碎片，一起分配*/</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// mem_size -= fbt-&gt;size;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">if</span> <span class="p">(</span><span class="n">pre</span> <span class="o">==</span> <span class="n">free_block</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="n">free_block</span> <span class="o">=</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">pre</span> <span class="o">==</span> <span class="n">fbt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="k">for</span> <span class="p">(</span><span class="n">pre</span> <span class="o">=</span> <span class="n">free_block</span><span class="p">;</span> <span class="n">pre</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">pre</span> <span class="o">=</span> <span class="n">pre</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                        <span class="k">if</span> <span class="p">(</span><span class="n">pre</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">==</span> <span class="n">fbt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">pre</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">NF_tmp</span> <span class="o">=</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>     <span class="c1">// 重新记录分配位置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">ab</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">=</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">start_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">ab</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">free</span><span class="p">(</span><span class="n">fbt</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">temp</span> <span class="o">=</span> <span class="n">free_block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">while</span> <span class="p">(</span><span class="n">temp</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">work</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="p">(</span><span class="n">work</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>     <span class="cm">/*如果当前空闲区与后面的空闲区相连，则合并*/</span>
</span></span><span class="line"><span class="cl">                        <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">+</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">==</span> <span class="n">work</span><span class="o">-&gt;</span><span class="n">start_addr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                            <span class="n">temp</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">+=</span> <span class="n">work</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                            <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">work</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                            <span class="k">if</span> <span class="p">(</span><span class="n">NF_tmp</span> <span class="o">==</span> <span class="n">work</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                                <span class="n">NF_tmp</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                            <span class="n">free</span><span class="p">(</span><span class="n">work</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                            <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="p">}</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="n">rearrange</span><span class="p">(</span><span class="n">ma_algorithm</span><span class="p">);</span> <span class="cm">/*重新按当前的算法排列空闲区*/</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">pre</span> <span class="o">=</span> <span class="n">fbt</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">fbt</span> <span class="o">=</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">fbt</span> <span class="o">!=</span> <span class="n">F</span><span class="p">);</span>     <span class="c1">// 判断fbt是否循环完一圈
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//内存分配
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">allocate_mem</span><span class="p">(</span><span class="k">struct</span> <span class="nc">allocated_block</span> <span class="o">*</span><span class="n">ab</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">ma_algorithm</span> <span class="o">==</span> <span class="n">MA_NF</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">allocate_mem_NF</span><span class="p">(</span><span class="n">ab</span><span class="p">,</span> <span class="n">ab</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">free_block_type</span> <span class="o">*</span><span class="n">fbt</span><span class="p">,</span> <span class="o">*</span><span class="n">pre</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">free_block_type</span> <span class="o">*</span><span class="n">temp</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="o">*</span><span class="n">p1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">allocated_block</span> <span class="o">*</span><span class="n">q</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">request_size</span> <span class="o">=</span> <span class="n">ab</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">max</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">fbt</span> <span class="o">=</span> <span class="n">pre</span> <span class="o">=</span> <span class="n">free_block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 若有空闲内存
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">fbt</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">ma_algorithm</span> <span class="o">==</span> <span class="n">MA_WF</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 若是最坏适应算法且最大的空闲内存也不够
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">fbt</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">&lt;</span> <span class="n">request_size</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>    <span class="c1">// 若不是WF则是由小到大排列，遍历空闲内存寻找需要的大小
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">while</span> <span class="p">(</span><span class="n">fbt</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">&lt;</span> <span class="n">request_size</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">pre</span> <span class="o">=</span> <span class="n">fbt</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">fbt</span> <span class="o">=</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="c1">// 遍历完仍旧找不到
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">fbt</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">&lt;</span> <span class="n">request_size</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">free_block</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>     <span class="c1">// 将剩余内存空间相加看是否足够
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">sum</span> <span class="o">=</span> <span class="n">free_block</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">temp</span> <span class="o">=</span> <span class="n">free_block</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">while</span> <span class="p">(</span><span class="n">temp</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">sum</span> <span class="o">+=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="p">(</span><span class="n">sum</span> <span class="o">&gt;=</span> <span class="n">request_size</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                        <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                    <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="n">temp</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="c1">// 还不够，退出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">else</span> <span class="p">{</span>  <span class="c1">// 足够
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="n">pre</span> <span class="o">=</span> <span class="n">free_block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                    <span class="n">max</span> <span class="o">=</span> <span class="n">free_block</span><span class="o">-&gt;</span><span class="n">start_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                    <span class="n">fbt</span> <span class="o">=</span> <span class="n">free_block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                    <span class="k">while</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="n">pre</span><span class="p">)</span> <span class="p">{</span>     <span class="c1">// 找到这些块的最大地址
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                        <span class="k">if</span> <span class="p">(</span><span class="n">max</span> <span class="o">&lt;</span> <span class="n">pre</span><span class="o">-&gt;</span><span class="n">start_addr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                            <span class="n">max</span> <span class="o">=</span> <span class="n">pre</span><span class="o">-&gt;</span><span class="n">start_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                            <span class="n">fbt</span> <span class="o">=</span> <span class="n">pre</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="p">}</span>
</span></span><span class="line"><span class="cl">                        <span class="n">pre</span> <span class="o">=</span> <span class="n">pre</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                    <span class="n">pre</span> <span class="o">=</span> <span class="n">free_block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="k">while</span> <span class="p">(</span><span class="n">pre</span> <span class="o">!=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="n">q</span> <span class="o">=</span> <span class="n">allocated_block_head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="n">p</span> <span class="o">=</span> <span class="n">free_block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                        <span class="k">while</span> <span class="p">(</span><span class="n">q</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>     <span class="c1">// 向前推 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                            <span class="k">if</span> <span class="p">(</span><span class="n">q</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">&gt;</span> <span class="n">pre</span><span class="o">-&gt;</span><span class="n">start_addr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                                <span class="n">q</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">=</span> <span class="n">q</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">-</span> <span class="n">pre</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                            <span class="n">q</span> <span class="o">=</span> <span class="n">q</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="p">}</span>
</span></span><span class="line"><span class="cl">                        <span class="k">while</span> <span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                            <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">&gt;</span> <span class="n">pre</span><span class="o">-&gt;</span><span class="n">start_addr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                                <span class="n">p</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">-</span> <span class="n">pre</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                            <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                        <span class="n">pre</span> <span class="o">=</span> <span class="n">pre</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="n">pre</span> <span class="o">=</span> <span class="n">free_block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                    <span class="k">while</span> <span class="p">(</span><span class="n">pre</span> <span class="o">!=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                        <span class="n">p1</span> <span class="o">=</span> <span class="n">pre</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="k">if</span> <span class="p">(</span><span class="n">pre</span> <span class="o">==</span> <span class="n">fbt</span><span class="p">)</span>     <span class="c1">// 最大块
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="n">free</span><span class="p">(</span><span class="n">pre</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                        <span class="n">pre</span> <span class="o">=</span> <span class="n">p1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                    <span class="n">q</span> <span class="o">=</span> <span class="n">allocated_block_head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                    <span class="n">free_block</span> <span class="o">=</span> <span class="n">fbt</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                    <span class="n">free_block</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">=</span> <span class="n">q</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">+</span> <span class="n">q</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="n">free_block</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">sum</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                    <span class="n">free_block</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="p">(</span><span class="n">free_block</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">-</span> <span class="n">request_size</span> <span class="o">&lt;</span> <span class="n">MIN_SLICE</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// 分割后太小就一起分割 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                        <span class="n">ab</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">free_block</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="n">ab</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">=</span> <span class="n">free_block</span><span class="o">-&gt;</span><span class="n">start_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="n">pre</span> <span class="o">=</span> <span class="n">free_block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="n">free_block</span> <span class="o">=</span> <span class="n">free_block</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="n">free</span><span class="p">(</span><span class="n">pre</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>    <span class="c1">// 分割内存
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                        <span class="n">ab</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">=</span> <span class="n">free_block</span><span class="o">-&gt;</span><span class="n">start_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="n">free_block</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">                            <span class="n">free_block</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">+</span> <span class="n">request_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="n">free_block</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">free_block</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">-</span> <span class="n">request_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">else</span>   <span class="c1">// 剩余空间相加仍旧不够
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>    <span class="c1">// 遍历空闲内存找到了足够大的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">fbt</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">-</span> <span class="n">request_size</span> <span class="o">&lt;</span> <span class="n">MIN_SLICE</span><span class="p">)</span> <span class="p">{</span>     <span class="c1">// 分割后太小就一起分割 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">ab</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">ab</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">=</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">start_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="n">pre</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">==</span> <span class="n">free_block</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">free_block</span> <span class="o">=</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">pre</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="n">free_block</span> <span class="o">=</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">free</span><span class="p">(</span><span class="n">fbt</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>    <span class="c1">// 分割内存
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">ab</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">=</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">start_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">=</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">+</span> <span class="n">request_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">-</span> <span class="n">request_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">rearrange</span><span class="p">(</span><span class="n">ma_algorithm</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>    <span class="c1">// 无空闲内存
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Free Memory already has been allocated over: &#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//选择杀死一个进程
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">kill_process</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="nc">allocated_block</span> <span class="o">*</span><span class="n">ab</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">pid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Kill Process, pid=&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pid</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">ab</span> <span class="o">=</span> <span class="n">find_process</span><span class="p">(</span><span class="n">pid</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">ab</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">free_mem</span><span class="p">(</span><span class="n">ab</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">dispose</span><span class="p">(</span><span class="n">ab</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//找到要杀死的进程的标号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">allocated_block</span> <span class="o">*</span><span class="nf">find_process</span><span class="p">(</span><span class="kt">int</span> <span class="n">pid</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">allocated_block</span> <span class="o">*</span><span class="n">abb</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">abb</span> <span class="o">=</span> <span class="n">allocated_block_head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">abb</span><span class="o">-&gt;</span><span class="n">pid</span> <span class="o">==</span> <span class="n">pid</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">abb</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">abb</span> <span class="o">=</span> <span class="n">allocated_block_head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">abb</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">abb</span><span class="o">-&gt;</span><span class="n">pid</span> <span class="o">==</span> <span class="n">pid</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">abb</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">abb</span> <span class="o">=</span> <span class="n">abb</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">abb</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//释放杀死进程的内存块
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">free_mem</span><span class="p">(</span><span class="k">struct</span> <span class="nc">allocated_block</span> <span class="o">*</span><span class="n">ab</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">algorithm</span> <span class="o">=</span> <span class="n">ma_algorithm</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="nc">free_block_type</span> <span class="o">*</span><span class="n">fbt</span><span class="p">,</span> <span class="o">*</span><span class="n">pre</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">fbt</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="nc">free_block_type</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="nc">free_block_type</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="n">pre</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="nc">free_block_type</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="nc">free_block_type</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">fbt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">=</span> <span class="n">ab</span><span class="o">-&gt;</span><span class="n">start_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">ab</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">free_block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">free_block</span> <span class="o">=</span> <span class="n">fbt</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">rearrange_FF</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">pre</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">free_block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pre</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">pre</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">pre</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">!=</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">start_addr</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">pre</span> <span class="o">=</span> <span class="n">pre</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">pre</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(((</span><span class="n">pre</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">+</span> <span class="n">pre</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">)</span> <span class="o">==</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">start_addr</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="cl">            <span class="p">((</span><span class="n">fbt</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">+</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">)</span> <span class="o">==</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">start_addr</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">pre</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">pre</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">+</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">+</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">pre</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">free</span><span class="p">(</span><span class="n">fbt</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">free</span><span class="p">(</span><span class="n">fbt</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="n">pre</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">+</span> <span class="n">pre</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">)</span> <span class="o">==</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">start_addr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">pre</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">pre</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">+</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">pre</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">free</span><span class="p">(</span><span class="n">fbt</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">fbt</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">+</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">==</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">start_addr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">+</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">free</span><span class="p">(</span><span class="n">fbt</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="n">pre</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">((</span><span class="n">fbt</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">+</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">)</span> <span class="o">==</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">start_addr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">+</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">free_block</span> <span class="o">=</span> <span class="n">fbt</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">free</span><span class="p">(</span><span class="n">fbt</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">fbt</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">((</span><span class="n">pre</span><span class="o">-&gt;</span><span class="n">start_addr</span> <span class="o">+</span> <span class="n">pre</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">)</span> <span class="o">==</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">start_addr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">pre</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">pre</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">+</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">pre</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">free</span><span class="p">(</span><span class="n">fbt</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">rearrange</span><span class="p">(</span><span class="n">algorithm</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//销毁杀死进程的结点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">dispose</span><span class="p">(</span><span class="k">struct</span> <span class="nc">allocated_block</span> <span class="o">*</span><span class="n">free_ab</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="nc">allocated_block</span> <span class="o">*</span><span class="n">pre</span><span class="p">,</span> <span class="o">*</span><span class="n">ab</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">free_ab</span> <span class="o">==</span> <span class="n">allocated_block_head</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">allocated_block_head</span> <span class="o">=</span> <span class="n">allocated_block_head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">free</span><span class="p">(</span><span class="n">free_ab</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">pre</span> <span class="o">=</span> <span class="n">allocated_block_head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ab</span> <span class="o">=</span> <span class="n">allocated_block_head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">ab</span> <span class="o">!=</span> <span class="n">free_ab</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">pre</span> <span class="o">=</span> <span class="n">ab</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">ab</span> <span class="o">=</span> <span class="n">ab</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">pre</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">ab</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">free</span><span class="p">(</span><span class="n">ab</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//显示内存使用情况
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">display_mem_usage</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="nc">free_block_type</span> <span class="o">*</span><span class="n">fbt</span> <span class="o">=</span> <span class="n">free_block</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="nc">allocated_block</span> <span class="o">*</span><span class="n">ab</span> <span class="o">=</span> <span class="n">allocated_block_head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;----------------------------------------------------------</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">fbt</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Free Memory already used over !</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;----------------------------------------------------------</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">fbt</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Free Memory:</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%20s %20s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="s">&#34; start_addr&#34;</span><span class="p">,</span> <span class="s">&#34; size&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="p">(</span><span class="n">fbt</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%20d %20d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">start_addr</span><span class="p">,</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">fbt</span> <span class="o">=</span> <span class="n">fbt</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">Used Memory:</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%10s %20s %15s %10s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="s">&#34;PID&#34;</span><span class="p">,</span> <span class="s">&#34;ProcessName&#34;</span><span class="p">,</span> <span class="s">&#34;start_addr&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">           <span class="s">&#34; size&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">ab</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%10d %20s %15d %10d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">ab</span><span class="o">-&gt;</span><span class="n">pid</span><span class="p">,</span> <span class="n">ab</span><span class="o">-&gt;</span><span class="n">process_name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">               <span class="n">ab</span><span class="o">-&gt;</span><span class="n">start_addr</span><span class="p">,</span> <span class="n">ab</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">ab</span> <span class="o">=</span> <span class="n">ab</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;----------------------------------------------------------</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//退出，销毁所有链表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">do_exit</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">free_block_type</span> <span class="o">*</span><span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">allocated_block</span> <span class="o">*</span><span class="n">temp1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">temp</span> <span class="o">=</span> <span class="n">free_block</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">temp</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">free_block</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">free</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">temp</span> <span class="o">=</span> <span class="n">free_block</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">free</span><span class="p">(</span><span class="n">free_block</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">allocated_block_head</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">temp1</span> <span class="o">=</span> <span class="n">allocated_block_head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">temp1</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">allocated_block_head</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">temp1</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">free</span><span class="p">(</span><span class="n">temp1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">temp1</span> <span class="o">=</span> <span class="n">allocated_block_head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">free</span><span class="p">(</span><span class="n">allocated_block_head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">//主函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">choice</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pid</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">free_block</span> <span class="o">=</span> <span class="n">init_free_block</span><span class="p">(</span><span class="n">mem_size</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">display_menu</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">fflush</span><span class="p">(</span><span class="n">stdin</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">choice</span> <span class="o">=</span> <span class="n">getchar</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">switch</span> <span class="p">(</span><span class="n">choice</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="sc">&#39;1&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">set_mem_size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="sc">&#39;2&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">set_algorithm</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="sc">&#39;3&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">new_process</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="sc">&#39;4&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">kill_process</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="sc">&#39;5&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">display_mem_usage</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="sc">&#39;0&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">do_exit</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">default</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
    <title>计算机图形学——学习笔记</title>
    <link>http://graficc.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
    <pubDate>Sun, 16 May 2021 21:13:06 &#43;0000</pubDate><author>1494255412@mail.dlut.edu.cn (Horel)</author><guid>http://graficc.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
    <description><![CDATA[<h1 id="计算机图形学学习笔记">计算机图形学——学习笔记</h1>
<h1 id="前言">前言</h1>
<p>:::info</p>
<p><strong>终于迈出学习计算机图形学的第一步了&hellip;&hellip;</strong></p>
<p>:::</p>
<p>++喜欢上计算机图形学的起因大概是听了传奇程序员==约翰·卡马克==的故事，这位推动了3D发展的大佬给我留下了无比深刻的印象。++{.dot}</p>
<p><figure><a class="lightgallery" href="https://tva4.sinaimg.cn/large/008ieO5lly8gqmb5tqfs4j30go093wfi.jpg" title="约翰·卡马克" data-thumbnail="https://tva4.sinaimg.cn/large/008ieO5lly8gqmb5tqfs4j30go093wfi.jpg" data-sub-html="<h2>约翰·卡马克</h2><p>约翰·卡马克</p>">
        
    </a><figcaption class="image-caption">约翰·卡马克</figcaption>
    </figure></p>
<p><del>再加上我对渲染、光追、VR、AR等等也都很感兴趣，就想去了解更多，于是也就有了这篇记录博客。</del>{.danger}</p>
<h1 id="计划第一步games101-现代计算机图形学入门">计划第一步——GAMES101-现代计算机图形学入门</h1>
<p>++计划先观看闫令琪大佬的视屏：GAMES101-现代计算机图形学入门++{.wavy}</p>
<p>{% links %}</p>
<ul>
<li>site: GAMES101-现代计算机图形学入门
owner: 闫令琪
url: <a href="https://www.bilibili.com/video/BV1X7411F744?from=search&amp;seid=16228307511649123560" target="_blank" rel="noopener noreffer">https://www.bilibili.com/video/BV1X7411F744?from=search&seid=16228307511649123560</a>
desc: 闫令琪
image: <a href="https://tva4.sinaimg.cn/large/008ieO5lly8gpxh7gr2ajj308c08c3yp.jpg" target="_blank" rel="noopener noreffer">https://tva4.sinaimg.cn/large/008ieO5lly8gpxh7gr2ajj308c08c3yp.jpg</a>
color: &ldquo;#e9546b&rdquo;
{% endlinks %}</li>
</ul>
<p>编辑器当然还是用我最喜欢的VIM	!!虽然视屏里闫令琪老师极其不推荐，但我用了挺多插件，真的顺手&hellip;&hellip;.!!</p>
<p>开发环境我决定使用实体机，<del>因为不喜欢用虚拟机，尤其是其他发行版的Linux&hellip;&hellip;</del>{.danger}</p>
<p>视屏里的作业首先需要下载编译器和两个库，ArchLinux可以直接执行以下命令安装：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo pacman -S gcc make cmake eigen opencv vtk hdf5 glew
</span></span></code></pre></td></tr></table>
</div>
</div><p>Eigen是矩阵库，OpenCV是视觉和机器学习软件库（实测最新的版本4.x也可以）</p>
<p>gcc是编译器，<em>CMake</em>是一个跨平台的安装（编译）工具</p>
<p>其他部分是依赖</p>
<p>:::success</p>
<p><del>从入门到放弃的</del>{.danger}	<strong>进度</strong></p>
<p>:::</p>
<h2 id="视屏进度">视屏进度</h2>
<p>;;;id1	P1——P5</p>
<ul>
<li>
<p><i class="far fa-check-square fa-fw"></i> P1	图形学概述</p>
</li>
<li>
<p><i class="far fa-check-square fa-fw"></i> P2    线性代数回顾：点乘(方向角度)、叉乘(判断左右、内外)、矩阵(基础概念)</p>
</li>
<li>
<p><i class="far fa-check-square fa-fw"></i> P3    2D仿射变换：(线性变换)旋转、平移(水温逐渐升高)</p>
</li>
<li>
<p><i class="far fa-check-square fa-fw"></i> P4    3D变换、观测(视图、投影)、正交、透视投影(青蛙煮熟了)</p>
</li>
<li>
<p><i class="far fa-check-square fa-fw"></i> P5    三角形光栅化(采样)、缩放、平移、旋转</p>
</li>
</ul>
<p>;;;</p>
<p>;;;id1	P6——P10</p>
<ul>
<li>
<p><i class="far fa-check-square fa-fw"></i> P6	 光栅化(反走样、深度缓冲)、Artifacts、先做模糊(滤波)再采样、时域的卷积=频域的乘积、MSAA(多重采样抗锯齿，同一像素增加了采样点)、FXAA(快速近似抗锯齿，不是采样，先模糊，再替换边界锯齿)、TAA(时间近似抗锯齿，复用上一帧)、Super resolution(超分辨率)、DLSS !!深度学习==猜，淦!!</p>
</li>
<li>
<p><i class="far fa-check-square fa-fw"></i> P7     可见性遮挡(深度缓存)、着色、画家算法、Z-Buffer(例如深度一样游戏会闪就是)、shading(着色不同材质)、漫反射(和观测方向无关)</p>
</li>
<li>
<p><i class="far fa-check-square fa-fw"></i> P8     Blinn-Phong着色模型、高光(半程向量和法向量是否足够接近，余弦的指数一般用100——200)、环境光(大胆假设：常数)、着色频率(每个面片、顶点、像素)、实时渲染(图形)管线、shader(着色器)、纹理映射</p>
</li>
<li>
<p><i class="far fa-check-square fa-fw"></i> P9     纹理的应用、重心坐标插值(为得到顶点间平滑的过度)、纹理贴图(纹理低分辨率时Bilinear双线性插值)、双向三阶插值(Bicubic)、纹理太大会丢失细节(又是走样!)、Mipmap(范围查询、只能近似方形)、log2 L、三线性插值(纹理内部双线性插值，Mipmap层之间插值)得到连续的图、Overblur(Mipmap用了近似)、各向异性过滤(矩形区域)</p>
</li>
<li>
<p><i class="far fa-square fa-fw"></i> P10    环境光照(环境光纹理)、cubemap、凹凸贴图、位移贴图、几何？？？</p>
</li>
</ul>
<p>;;;</p>
<p>;;;id1	P11——P15</p>
<ul>
<li>
<p><i class="far fa-square fa-fw"></i> P11</p>
</li>
<li>
<p><i class="far fa-square fa-fw"></i> P12</p>
</li>
<li>
<p><i class="far fa-square fa-fw"></i> P13</p>
</li>
<li>
<p><i class="far fa-square fa-fw"></i> P14</p>
</li>
<li>
<p><i class="far fa-square fa-fw"></i> P15</p>
</li>
</ul>
<p>;;;</p>
<p>;;;id1	P16——P20</p>
<ul>
<li>
<p><i class="far fa-square fa-fw"></i> P16</p>
</li>
<li>
<p><i class="far fa-square fa-fw"></i> P17</p>
</li>
<li>
<p><i class="far fa-square fa-fw"></i> P18</p>
</li>
<li>
<p><i class="far fa-square fa-fw"></i> P19</p>
</li>
<li>
<p><i class="far fa-square fa-fw"></i> P20</p>
</li>
</ul>
<p>;;;</p>
<p>;;;id1	P21——P23</p>
<ul>
<li>
<p><i class="far fa-square fa-fw"></i> P21</p>
</li>
<li>
<p><i class="far fa-square fa-fw"></i> P22</p>
</li>
<li>
<p><i class="far fa-square fa-fw"></i> P23</p>
</li>
</ul>
<p>;;;</p>
<h2 id="作业进度">作业进度</h2>
<ul>
<li>
<p><i class="far fa-check-square fa-fw"></i> 作业0	还行，能做</p>
</li>
<li>
<p><i class="far fa-check-square fa-fw"></i> 作业1    人类迷惑行为？代公式，懂了</p>
</li>
<li>
<p><i class="far fa-check-square fa-fw"></i> 作业2    怀疑智商&hellip;MSAA的黑线好难改</p>
</li>
<li>
<p><i class="far fa-square fa-fw"></i> 作业3</p>
</li>
<li>
<p><i class="far fa-square fa-fw"></i> 作业4</p>
</li>
<li>
<p><i class="far fa-square fa-fw"></i> 作业5</p>
</li>
<li>
<p><i class="far fa-square fa-fw"></i> 作业6</p>
</li>
<li>
<p><i class="far fa-square fa-fw"></i> 作业7</p>
</li>
</ul>
<p>!!不能放弃，坚持！!!</p>
<h2 id="笔记大纲">笔记大纲</h2>
<ul>
<li>Transformation 变换
<ul>
<li>Model 模型变换</li>
<li>View 视图变换</li>
<li>Projection 投影</li>
</ul>
</li>
<li>Rasterization 光栅化
<ul>
<li>Viewport 视口变换</li>
<li>Sample 采样</li>
<li>Antialisaing 反走样</li>
<li>Z-Buffering 深度缓冲</li>
</ul>
</li>
<li>Shading 着色
<ul>
<li>
<p>Illumination 光照(Blinn-Phong着色模型)</p>
<ul>
<li>Diffuse 漫反射</li>
<li>Specular 高光</li>
<li>Ambient 环境光</li>
</ul>
</li>
<li>
<p>shading frequencies 着色频率</p>
<ul>
<li>Flat shading 逐面着色</li>
<li>Gouraud shading 逐顶点着色</li>
<li>Phong shading 逐像素着色</li>
</ul>
</li>
<li>
<p>pipline 管线</p>
<ul>
<li>实时渲染管线流程</li>
<li>shader 着色器</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="第二步fundamentals-of-computer-graphics">第二步——Fundamentals of Computer Graphics</h1>
<p>!!英文也太难啃了，看一眼就头大了!!{.bulr}</p>
<h1 id="学习更新记录">学习更新记录</h1>
<ul>
<li>
<p>!!2021-05-24!!</p>
</li>
<li>
<p>!!2021-05-30!!</p>
</li>
</ul>
<p>没啥好的记笔记方法，等一波小米的平板出了再继续学习。。。</p>
<ul>
<li>2021-06-26	重装系统忘记备份作业代码了。。。更新鸽了</li>
<li>2021-09-18 	买了平板！可以在pdf课件上记笔记啦，方便多了！重启学习计划！</li>
<li>2021-09-19     完成P3, Hw0</li>
<li>2021-09-23     完成P4-5, Hw1</li>
<li>2021-09-26     完成P6-7, Hw2 MSAA黑线问题：先渲染绿色三角形后，边界为绿色和黑色的混合。再渲染蓝色三角形时，因为只维护了像素点的深度信息，判定蓝色三角形这条边上的像素比绿色远，不进行渲染，无法覆盖绿黑边像素。解决方法：增加深度buffer大小，将所有采样点的深度信息都进行维护，这样绿色边界只有三个采样点较近，还有一个为黑色无穷远，这一个采样点被下方的蓝色同一采样点的深度信息替换。这样，两三角形的交界处的一个像素内有三个绿色采样点，一个蓝色采样点。颜色为他们的混合，3/4绿色 + 1/4蓝色。</li>
</ul>
]]></description>
</item>
<item>
    <title>Arch Linux指南</title>
    <link>http://graficc.github.io/posts/arch-linux%E6%8C%87%E5%8D%97/</link>
    <pubDate>Mon, 26 Apr 2021 22:50:04 &#43;0000</pubDate><author>1494255412@mail.dlut.edu.cn (Horel)</author><guid>http://graficc.github.io/posts/arch-linux%E6%8C%87%E5%8D%97/</guid>
    <description><![CDATA[<h1 id="安装前的准备工作">安装前的准备工作</h1>
<h2 id="下载镜像">下载镜像</h2>
<p>可以去北京外国语(bfsu)大学的镜像站获取最新的iso，地址如下：<a href="https://mirrors.bfsu.edu.cn/" target="_blank" rel="noopener noreffer">广度优先搜索(bfsu)大学开源镜像站</a></p>
<h2 id="准备一个u盘">准备一个U盘</h2>
<p>任意品牌，最好是USB3.0以上的，8G就够</p>
<h2 id="制作启动盘">制作启动盘</h2>
<p>win10系统推荐使用rufus软件烧录：<a href="https://rufus.ie/zh" target="_blank" rel="noopener noreffer">rufus</a></p>
<p>linux系统可以直接使用dd命令烧录：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo dd <span class="k">if</span><span class="o">=</span>Archlinux_name.iso <span class="nv">of</span><span class="o">=</span>/dev/sdb
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="基础系统安装">基础系统安装</h1>
<h2 id="确认是否为-uefi-模式">确认是否为 UEFI 模式</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ls /sys/firmware/efi/efivars
</span></span></code></pre></td></tr></table>
</div>
</div><p>若输出了一堆东西，即 efi 变量，则说明已在 UEFI 模式。否则请确认你的启动方式是否为 UEFI。</p>
<h2 id="启动参数修改optional">启动参数修改(optional)</h2>
<blockquote>
<p>若正常启动后花屏,说明显卡驱动有问题(例如NVIDIA显卡太新还没有开源驱动)</p>
</blockquote>
<p>启动项按e添加<code>modprobe.blacklist=nouveau</code>以禁用开源驱动</p>
<h2 id="使用iwd联网">使用iwd联网</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">iwctl
</span></span><span class="line"><span class="cl">device list
</span></span><span class="line"><span class="cl">station wlan0 scan
</span></span><span class="line"><span class="cl">station wlan0 connect <span class="s2">&#34;网络名_xxx&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="更新系统时间">更新系统时间</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">timedatectl set-ntp <span class="nb">true</span>
</span></span><span class="line"><span class="cl">timedatectl status
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="分区">分区</h2>
<p>我在/dev/nvme0n1这块硬盘上分了四个区</p>
<ul>
<li>/boot	分256M	ef00</li>
<li>swap    分８G        8200</li>
<li>/            分100G     8304</li>
<li>/home 分300G     8302</li>
</ul>
<blockquote>
<p>使用以下命令分区</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">lsblk
</span></span><span class="line"><span class="cl">gdisk /dev/nvme0n1
</span></span><span class="line"><span class="cl">用d删除旧分区
</span></span><span class="line"><span class="cl">用n按上面列出的新建分区
</span></span><span class="line"><span class="cl">用w确定并退出
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>接下来格式化分区</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkfs.fat -F32 /dev/nvme0n1p1
</span></span><span class="line"><span class="cl">mkswap /dev/nvme0n1p2
</span></span><span class="line"><span class="cl">swapon /dev/nvme0n1p2
</span></span><span class="line"><span class="cl">mkfs.xfs /dev/nvme0n1p3
</span></span><span class="line"><span class="cl">mkfs.xfs /dev/nvme0n1p4
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>然后挂载分区</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mount /dev/nvme0n1p3 /mnt
</span></span><span class="line"><span class="cl">mkdir /mnt/boot
</span></span><span class="line"><span class="cl">mkdir /mnt/home
</span></span><span class="line"><span class="cl">mount /dev/nvme0n1p1 /mnt/boot
</span></span><span class="line"><span class="cl">mount /dev/nvme0n1p4 /mnt/home
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="选择镜像">选择镜像</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vim /etc/pacman.d/mirrorlist
</span></span></code></pre></td></tr></table>
</div>
</div><p>最上面填入：</p>
<blockquote>
<p>Server = <a href="https://mirrors.bfsu.edu.cn/archlinux/$repo/os/$arch" target="_blank" rel="noopener noreffer">https://mirrors.bfsu.edu.cn/archlinux/$repo/os/$arch</a></p>
</blockquote>
<h2 id="安装必须软件包">安装必须软件包</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pacstrap /mnt bash-completion iwd dhcpcd base base-devel linux linux-firmware linux-headers man man-db man-pages texinfo vim xfsprogs ntfs-3g nvidia nvidia-utils nvidia-settings opencl-nvidia
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="生成fstab">生成Fstab</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab
</span></span><span class="line"><span class="cl">vim /mnt/etc/fstab
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="chroot至新系统">Chroot至新系统</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">arch-chroot /mnt
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="本地化">本地化</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
</span></span><span class="line"><span class="cl">hwclock --systohc
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">vim /etc/locale.gen
</span></span><span class="line"><span class="cl">取消注释zh_CN.UTF-8和en_US.UTF-8
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">locale-gen
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">vim /etc/locale.conf
</span></span><span class="line"><span class="cl"><span class="nv">填入LANG</span><span class="o">=</span>en_US.UTF-8
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="网络配置">网络配置</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vim /etc/hostname
</span></span></code></pre></td></tr></table>
</div>
</div><p>填入自己的主机名，例如AORUS</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vim /etc/hosts
</span></span></code></pre></td></tr></table>
</div>
</div><p>填入如下，要注意主机名相同</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">127.0.0.1	localhost
</span></span><span class="line"><span class="cl">::1		localhost
</span></span><span class="line"><span class="cl">127.0.1.1	AORUS.localdomain	AORUS
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="生成initramfs">生成Initramfs</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkinitcpio -P
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="设置密码">设置密码</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">passwd
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="安装grub">安装grub</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pacman -Sy grub efibootmgr os-prober
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> ~
</span></span><span class="line"><span class="cl">mkdir MS
</span></span><span class="line"><span class="cl">mount /dev/nvme1n1p1 MS
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#要注意os_prober已经默认不识别其他系统了</span>
</span></span><span class="line"><span class="cl">vim /etc/default/grub
</span></span><span class="line"><span class="cl"><span class="nv">最后一行填入GRUB_DISABLE_OS_PROBER</span><span class="o">=</span><span class="nb">false</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">grub-install --target<span class="o">=</span>x86_64-efi --efi-directory<span class="o">=</span>/boot --bootloader-id<span class="o">=</span>Arch --recheck
</span></span><span class="line"><span class="cl">grub-mkconfig -o /boot/grub/grub.cfg
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">exit</span>
</span></span><span class="line"><span class="cl">umount -R /mnt
</span></span><span class="line"><span class="cl">reboot
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="桌面环境安装">桌面环境安装</h1>
<h2 id="联网">联网</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">systemctl start iwd
</span></span><span class="line"><span class="cl">dhcpcd
</span></span><span class="line"><span class="cl">iwctl
</span></span><span class="line"><span class="cl">station wlan0 connect <span class="s2">&#34;网络名_xxx&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="新建用户并授权">新建用户并授权</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">useradd -m -G wheel 用户名<span class="o">(</span>limbo<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">EDITOR</span><span class="o">=</span>vim visudo
</span></span><span class="line"><span class="cl">取消注释 %wheel <span class="nv">ALL</span><span class="o">=(</span>ALL<span class="o">)</span> ALL
</span></span><span class="line"><span class="cl"><span class="nb">exit</span>
</span></span><span class="line"><span class="cl">以新用户重新登陆
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="安装桌面">安装桌面</h2>
<blockquote>
<p>安装gnome40桌面</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo pacman -S xorg gdm gnome gnome-tweaks chrome-gnome-shell
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="自启动设置">自启动设置</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo systemctl preset-all
</span></span><span class="line"><span class="cl">sudo systemctl <span class="nb">enable</span> gdm
</span></span><span class="line"><span class="cl">sudo systemctl <span class="nb">enable</span> NetworkManager
</span></span><span class="line"><span class="cl">sudo systemctl <span class="nb">enable</span> bluetooth
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="配置cn源">配置CN源</h2>
<blockquote>
<p>vim /etc/pacman .conf</p>
<p>加入以下内容</p>
</blockquote>
<p>[archlinuxcn]</p>
<p>Server = <a href="https://mirrors.bfsu.edu.cn/archlinuxcn/$arch" target="_blank" rel="noopener noreffer">https://mirrors.bfsu.edu.cn/archlinuxcn/$arch</a></p>
<h2 id="pacman配置">pacman配置</h2>
<blockquote>
<p>vim /etc/pacman.conf	吃豆人、升级前后对比版本</p>
</blockquote>
<p>Color</p>
<p>ILoveCandy</p>
<p>VerbosePkgLists</p>
<h2 id="安装常用软件">安装常用软件</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo pacman -S zsh alacritty git wget typora telegram google-chrome chromium neofetch gcc gdb clang llvm nodejs yarn visual-studio-code-bin
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="挂起设置">挂起设置</h2>
<blockquote>
<p>vim /etc/fstab 把swap的UUID复制下来</p>
</blockquote>
<blockquote>
<p>sudo vim /etc/default/grub	在GRUB_CMDLINE_LINUX_DEFAULT里添加例如如下的UUID</p>
<p>resume=UUID=b184a7a0-a9c4-431c-b0a7-f50bbf052eb5</p>
</blockquote>
<blockquote>
<p>sudo vim /etc/mkinitcpio.conf	修改例如如下的内容</p>
<p>HOOKS=(base udev resume autodetect modconf block filesystems keyboard fsck)</p>
</blockquote>
<h1 id="软件安装配置">软件安装配置</h1>
<h2 id="dotfiles">dotfiles</h2>
<p><a href="https://github.com/horel/dotfiles.git" target="_blank" rel="noopener noreffer">我个人的dotfiles，请根据自身情况修改</a></p>
<h2 id="配置环境变量">配置环境变量</h2>
<p>;;;id1 vi .xprofile</p>
<p>填入dotfiles里的系统环境变量</p>
<p>;;;</p>
<p>;;;id1 vi .gitconfig</p>
<p>填入dotfiles里的git环境变量</p>
<p>;;;</p>
<p>;;;id1 vi .yarnrc</p>
<p>填入dotfiles里的yarn环境变量</p>
<p>;;;</p>
<h2 id="clash代理">clash代理</h2>
<blockquote>
<p>sudo pacman -S clash</p>
</blockquote>
<blockquote>
<p>先运行一下clash下载db文件，下不动可以去dotfiles里捞</p>
</blockquote>
<blockquote>
<p>更新配置文件</p>
<p>cd .config/clash</p>
<p>wget 代理链接 -O config.yaml</p>
</blockquote>
<blockquote>
<p>设置开机自启动</p>
<p>systemctl &ndash;user enable clash.service</p>
</blockquote>
<h2 id="安装fcitx5输入法">安装Fcitx5输入法</h2>
<p>sudo pacman -S fcitx5-im fcitx5-chinese-addons</p>
<blockquote>
<p>另外 CN 源有词库可用：</p>
</blockquote>
<p>sudo pacman -S fcitx5-pinyin-{zhwiki,moegirl}</p>
<blockquote>
<p>支持qt和gtk安装以下依赖</p>
</blockquote>
<p>sudo pacman -S fcitx5-qt fcitx5-gtk</p>
<blockquote>
<p>主题配置参考：<a href="https://github.com/hosxy/Fcitx5-Material-Color" target="_blank" rel="noopener noreffer">fcitx5-material-color</a>，安装完成后直接用dotfiles的配置文件</p>
</blockquote>
<p>sudo pacman -S fcitx5-material-color</p>
<h2 id="fontconfig">fontconfig</h2>
<blockquote>
<p>先在.local/share/font把需要的字体放好，再从dotfiles里捞fontconfig</p>
</blockquote>
<blockquote>
<p>还有以下字体推荐安装：</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo pacman -S noto-fonts noto-fonts-extra noto-fonts-cjk noto-fonts-emoji ttf-sarasa-gothic ttf-nerd-fonts-symbols-mono ttf-opensans adobe-source-code-pro-fonts adobe-source-sans-pro-fonts adobe-source-serif-pro-fonts ttf-jetbrains-mono wqy-zenhei
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="alacritty终端">Alacritty终端</h2>
<p>安装完成后直接从dotfiles捞配置</p>
<h2 id="zsh">zsh</h2>
<blockquote>
<p>在.config/zsh下捞配置即可</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo pacman -S exa
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> plugins
</span></span><span class="line"><span class="cl">git clone https://github.com/zdharma/fast-syntax-highlighting.git
</span></span><span class="line"><span class="cl">git clone https://github.com/skywind3000/z.lua.git
</span></span><span class="line"><span class="cl">git clone https://github.com/zsh-users/zsh-autosuggestions.git
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>新建.cache/zsh/history存放记录</p>
</blockquote>
<h2 id="proxychains">proxychains</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo pacman -S proxychains-ng
</span></span><span class="line"><span class="cl">sudo vim /etc/proxychains.conf
</span></span><span class="line"><span class="cl">最后填入socks5	127.0.0.1	<span class="m">7891</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="yarn">yarn</h2>
<blockquote>
<p>捞配置文件里	.yarnrc</p>
</blockquote>
<h2 id="neovim">neovim</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo pacman -S neovim nodejs yarn python python-neovim xsel
</span></span><span class="line"><span class="cl">nvim :checkhealth不用管ruby<span class="o">(</span>我不用<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="plug-install">plug install</h3>
<blockquote>
<p>安装vim-plug：https://github.com/junegunn/vim-plug</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sh -c <span class="s1">&#39;curl -fLo &#34;${XDG_DATA_HOME:-$HOME/.local/share}&#34;/nvim/site/autoload/plug.vim --create-dirs \
</span></span></span><span class="line"><span class="cl"><span class="s1">       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>捞dotfiles最后 :PlugInstall</p>
</blockquote>
<h3 id="cocnvim">coc.nvim</h3>
<blockquote>
<p>CocInstall coc-marketplace</p>
<p>CocList markeyplace</p>
<p>coc-word</p>
<p>coc-tabnine</p>
<p>coc-snippets</p>
<p>coc-pairs</p>
<p>coc-highlight</p>
<p>coc-clangd</p>
<p>coc-java</p>
</blockquote>
<h3 id="coc-java">coc-java</h3>
<blockquote>
<p>格式化</p>
</blockquote>
<blockquote>
<p>vi rc.d/03-plugins-settings.vim 添加函数和快捷键</p>
</blockquote>
<p>&quot; Add <code>:Format</code> command to format current buffer.</p>
<p>command! -nargs=0 Format :call CocAction(&lsquo;format&rsquo;)</p>
<p>nnoremap<silent> <leader>lf :Format<CR></p>
<blockquote>
<p>CocCommand java.open.formatter.settings 	(需要打开一个java文件)</p>
<p><a href="https://github.com/google/styleguide/blob/gh-pages/eclipse-java-google-style.xml" target="_blank" rel="noopener noreffer">https://github.com/google/styleguide/blob/gh-pages/eclipse-java-google-style.xml</a> 	粘贴进去</p>
</blockquote>
<h3 id="neoformat">neoformat</h3>
<blockquote>
<p>c/cpp格式化</p>
<p>clang-format &ndash;dump-config &ndash;style=&quot;{BasedOnStyle: llvm, IndentWidth: 4}&quot; &gt; .clang-format</p>
</blockquote>
<blockquote>
<p>java格式化</p>
<p><del>sudo pacman -S astyle</del></p>
<p><del>echo &ldquo;&ndash;style=java&rdquo; &gt; .astylerc</del></p>
<p>(该方法效果一般，已弃用)</p>
</blockquote>
<blockquote>
<p>xml格式化</p>
<p>sudo pacman -S tidy</p>
</blockquote>
<h3 id="highlight">highlight</h3>
<blockquote>
<p>neovim 0.5版本以后使用nvim-treesitter</p>
<p><a href="https://github.com/nvim-treesitter/nvim-treesitter" target="_blank" rel="noopener noreffer">https://github.com/nvim-treesitter/nvim-treesitter</a></p>
</blockquote>
<p>:TSInstall {language}</p>
<h2 id="hexo博客恢复">hexo博客恢复</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yarn global add hexo-cli
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> Blog
</span></span><span class="line"><span class="cl">yarn
</span></span><span class="line"><span class="cl">然后deasync这玩意有可能不对，重装它吧......
</span></span><span class="line"><span class="cl">yarn add deasync
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="telegram">telegram</h2>
<blockquote>
<p>记得登陆之前先把TG的代理设好，TG默认是使用系统代理的</p>
</blockquote>
<h2 id="chrome">chrome</h2>
<h3 id="switchyomega">SwitchyOmega</h3>
<blockquote>
<p>global	socks5	127.0.0.1	7891</p>
</blockquote>
<blockquote>
<p>auto switch</p>
<p>规则列表规则	global</p>
<p>默认情景模式	直接连接</p>
<p>AutoProxy</p>
<p><a href="https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/fullgfwlist.acl" target="_blank" rel="noopener noreffer">https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/fullgfwlist.acl</a></p>
</blockquote>
<h3 id="tampermonkey">Tampermonkey</h3>
<blockquote>
<p>全放在chrome书签栏里了</p>
</blockquote>
<h2 id="vscode">VSCode</h2>
<blockquote>
<p>插件</p>
</blockquote>
<ul>
<li>
<p>One Dark Pro</p>
</li>
<li>
<p>Cloudmusic</p>
</li>
<li>
<p>cpp全家桶</p>
</li>
<li>
<p>java全家桶</p>
</li>
</ul>
<blockquote>
<p>字体</p>
</blockquote>
<ul>
<li>&lsquo;JetBrains Mono&rsquo;,&lsquo;MesloLGS NF&rsquo;,&lsquo;Sarasa Mono SC&rsquo;,&lsquo;monospace&rsquo;,&lsquo;Droid Sans Mono&rsquo;,  monospace, &lsquo;Droid Sans Fallback&rsquo;</li>
<li>控制字体大小 19</li>
<li>终端字体大小 16</li>
</ul>
<blockquote>
<p>主题</p>
</blockquote>
<ul>
<li>Window: Title Bar Style</li>
<li>One Dark Pro</li>
</ul>
<blockquote>
<p>键映射	!!用惯了Vim实在习惯不了UpArrow / DownArrow补全!!{.danger}</p>
</blockquote>
<ul>
<li>
<p>&ldquo;key&rdquo;: &ldquo;tab&rdquo;</p>
<p>&ldquo;command&rdquo;: &ldquo;selectNextSuggestion&rdquo;</p>
</li>
<li>
<p>&ldquo;key&rdquo;: &ldquo;shift+tab&rdquo;,
&ldquo;command&rdquo;: &ldquo;selectPrevSuggestion&rdquo;</p>
</li>
</ul>
<h2 id="maven">maven</h2>
<blockquote>
<p>设置镜像 vi .m2/settings.xml</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;settings&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;mirrors&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;mirror&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;id&gt;</span>nexus-tencentyun<span class="nt">&lt;/id&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;mirrorOf&gt;</span>*<span class="nt">&lt;/mirrorOf&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;name&gt;</span>Nexus tencentyun<span class="nt">&lt;/name&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;url&gt;</span>
</span></span><span class="line"><span class="cl">            http://mirrors.cloud.tencent.com/nexus/repository/maven-public/<span class="nt">&lt;/url&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/mirror&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/mirrors&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/settings&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="其他软件">其他软件</h2>
<ul>
<li>ImageMagick	安装后可使用display命令</li>
<li>android-tools    安卓工具包(adb等)</li>
</ul>
<h1 id="美化">美化</h1>
<blockquote>
<p>根据自己喜好来吧，可以参考 <a href="https://www.gnome-look.org" target="_blank" rel="noopener noreffer">https://www.gnome-look.org</a></p>
</blockquote>
<h2 id="gnome-shell-extensions">gnome-shell-extensions</h2>
<ul>
<li><strong>AppIndicator and KStatusNotifierItem Support</strong> 托盘图标支持</li>
<li><strong>ArcMenu</strong></li>
<li><strong>Dash to Panel</strong> 在gnome40上可用</li>
<li><strong>Dash to Dock</strong>  暂未更新gnome40</li>
<li><strong>Espresso</strong> 小咖啡，记得把它配置里的消息提醒关了</li>
<li><strong>Native Window Placement</strong> 缩小托盘图标间距</li>
<li><strong>No overview at start-up</strong> 在gnome40上开机不自动overview</li>
<li><strong>OpenWeather</strong></li>
<li><strong>Removable Drive Menu</strong> 托盘移除U盘</li>
<li><strong>Screenshot Tool</strong></li>
<li><strong>Transparent Top Bar</strong></li>
<li><strong>User Themes</strong></li>
<li><strong>Workspace Indicator</strong> 工作区</li>
</ul>
<h2 id="外观">外观</h2>
<h3 id="应用程序--shell">应用程序 &amp; Shell</h3>
<blockquote>
<p>aur软件先git clone，cd进入软件目录</p>
<p>makepkg -si</p>
</blockquote>
<p><a href="https://aur.archlinux.org/packages/matcha-gtk-theme" target="_blank" rel="noopener noreffer">matcha-sea</a></p>
<h3 id="光标">光标</h3>
<blockquote>
<p>aur软件 <a href="https://aur.archlinux.org/packages/xcursor-breeze" target="_blank" rel="noopener noreffer">xcursor-breeze</a></p>
</blockquote>
<h3 id="图标">图标</h3>
<blockquote>
<p>sudo pacman -S papirus-icon-theme</p>
</blockquote>
<blockquote>
<p>aur软件 <a href="https://aur.archlinux.org/packages/papirus-folders-git" target="_blank" rel="noopener noreffer">papirus-folders-git</a></p>
<p>papirus-folders -C teal &ndash;theme Papirus-Light</p>
</blockquote>
<h3 id="grub">grub</h3>
<p><a href="https://github.com/vinceliuice/grub2-themes" target="_blank" rel="noopener noreffer">vimix-grub-theme</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/vinceliuice/grub2-themes.git
</span></span><span class="line"><span class="cl">sudo ./install.sh -b -t vimix -i white
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="疑难问题optional">疑难问题(optional)</h1>
<h2 id="修gdm和nvidia冲突bugfuck-nvidia">修gdm和nvidia冲突bug(Fuck NVIDIA!)</h2>
<blockquote>
<p>有个版本内核gdm和nvidia驱动冲突了，会卡gdm黑屏</p>
</blockquote>
<blockquote>
<p>把nvidia启动写进kernel modules，提前启动</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo nvim /etc/mkinitcpio.conf
</span></span><span class="line"><span class="cl"><span class="nv">MODULES</span><span class="o">=(</span>nvidia nvidia_modeset nvidia_uvm nvidia_drm<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">HOOKS</span><span class="o">=(</span>base udev autodetect modconf block filesystems keyboard fsck<span class="o">)</span>
</span></span><span class="line"><span class="cl">sudo nvim /etc/default/grub
</span></span><span class="line"><span class="cl">内核参数加nvidia-drm.modeset<span class="o">=</span><span class="m">1</span>
</span></span><span class="line"><span class="cl">sudo mkinitcpio -P
</span></span><span class="line"><span class="cl">sudo grub-mkconfig -o /boot/grub/grub.cfg
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="更新chrome后每个网页都崩溃">更新Chrome后每个网页都崩溃</h2>
<ul>
<li>系统设置里开启网络代理，手动</li>
<li>或者sudo systemctl disable systemd-resolved(可能会导致DN42域名解析错误等等)</li>
</ul>
]]></description>
</item>
</channel>
</rss>
